#+TITLE:My AWESOME config
#+PROPERTY: header-args :tangle "rc.lua"


* Imports and stuff
#+begin_src lua
  -- If LuaRocks is installed, make sure that packages installed through it are
  -- found (e.g. lgi). If LuaRocks is not installed, do nothing.
  pcall(require, "luarocks.loader")

  -- Standard awesome library
  local gears = require("gears")
  local awful = require("awful")
  require("awful.autofocus")
  -- Widget and layout library
  local wibox = require("wibox")
  -- Theme handling library
  local beautiful = require("beautiful")
  -- Notification library
  local naughty = require("naughty")
  local menubar = require("menubar")
  local hotkeys_popup = require("awful.hotkeys_popup")
  -- Lain for more stuff
  local lain = require("lain")
  -- Enable hotkeys help widget for VIM and other apps
  -- when client with a matching name is opened:
  require("awful.hotkeys_popup.keys")
  require("awful.remote")
#+end_src

* Error handling
#+begin_src lua
  -- {{{ Error handling
  -- Check if awesome encountered an error during startup and fell back to
  -- another config (This code will only ever execute for the fallback config)
  if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
  end

  -- Handle runtime errors after startup
  do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
                             -- Make sure we don't go into an endless error loop
                             if in_error then return end
                             in_error = true

                             naughty.notify({ preset = naughty.config.presets.critical,
                                              title = "Oops, an error happened!",
                                              text = tostring(err) })
                             in_error = false
    end)
  end
  -- }}}
#+end_src

* Variable definitions
Theme
#+begin_src lua
  -- {{{ Variable definitions
  -- Themes define colours, icons, font and wallpapers.
  beautiful.init(gears.filesystem.get_themes_dir() .. "xresources/theme.lua")
#+end_src

Modifier
#+begin_src lua
  modkey = "Mod4"
#+end_src

Other things: editor, browser, locker, ...
#+begin_src lua
  terminal     = os.getenv("TERMINAL") or "urxvt" or "kitty" or "lxterminal"
  editor       = os.getenv("EDITOR") or "vim"
  browser      = "firefox"
  scrlocker    = "slock"
  editor_cmd = terminal .. " -e " .. editor
#+end_src

* Layouts
#+begin_src lua
  -- Table of layouts to cover with awful.layout.inc, order matters.
  awful.layout.layouts = {
    -- awful.layout.suit.floating,
    awful.layout.suit.tile,
    -- awful.layout.suit.tile.left,
    -- awful.layout.suit.tile.bottom,
    -- awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    -- awful.layout.suit.spiral,
    -- awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    -- awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,
    awful.layout.suit.corner.nw,
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.se,
    lain.layout.centerwork,
  }
  -- }}}
#+end_src

* Menu
#+begin_src lua
  -- {{{ Menu
  -- Create a launcher widget and a main menu
  myawesomemenu = {
    { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
    { "manual", terminal .. " -e man awesome" },
    { "edit config", editor_cmd .. " " .. awesome.conffile },
    { "restart", awesome.restart },
    { "quit", function() awesome.quit() end },
  }

  mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                              { "open terminal", terminal }
  }
                         })

  mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                       menu = mymainmenu })

  -- Menubar configuration
  menubar.utils.terminal = terminal -- Set the terminal for applications that require it
  -- }}}
#+end_src

#+begin_src lua
  -- Keyboard map indicator and switcher
  mykeyboardlayout = awful.widget.keyboardlayout()
#+end_src

* Wibar
#+begin_src lua
  -- {{{ Wibar
  -- Create a textclock widget
  mytextclock = wibox.widget.textclock()
#+end_src

#+begin_src lua
  -- Create a wibox for each screen and add it
  local taglist_buttons = gears.table.join(
    awful.button({ }, 1, function(t) t:view_only() end),
    awful.button({ modkey }, 1, function(t)
        if client.focus then
          client.focus:move_to_tag(t)
        end
    end),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ modkey }, 3, function(t)
        if client.focus then
          client.focus:toggle_tag(t)
        end
    end),
    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
  )
#+end_src

#+begin_src lua
  local tasklist_buttons = gears.table.join(
    awful.button({ }, 1, function (c)
        if c == client.focus then
          c.minimized = true
        else
          c:emit_signal(
            "request::activate",
            "tasklist",
            {raise = true}
          )
        end
    end),
    awful.button({ }, 3, function()
        awful.menu.client_list({ theme = { width = 250 } })
    end),
    awful.button({ }, 4, function ()
        awful.client.focus.byidx(1)
    end),
    awful.button({ }, 5, function ()
        awful.client.focus.byidx(-1)
  end))
#+end_src

* Tag sharing accross screens
#+begin_src lua
    local sharedtags = require("sharedtags")

    local tags = sharedtags({
      { name = "1", layout = awful.layout.layouts[1] },
      { name = "2", layout = awful.layout.layouts[1] },
      { name = "3", layout = awful.layout.layouts[1] },
      { name = "4", layout = awful.layout.layouts[1] },
      { name = "5", layout = awful.layout.layouts[1] },
      { name = "6", layout = awful.layout.layouts[1] },
      { name = "7", layout = awful.layout.layouts[1] },
      { name = "8", layout = awful.layout.layouts[1] },
      { name = "9", layout = awful.layout.layouts[1] },
  })
#+end_src

* Wallpaper and screen setup
#+begin_src lua
  local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
      local wallpaper = beautiful.wallpaper
      -- If wallpaper is a function, call it with the screen
      if type(wallpaper) == "function" then
        wallpaper = wallpaper(s)
      end
      gears.wallpaper.maximized(wallpaper, s, true)
    end
  end

  -- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
  screen.connect_signal("property::geometry", set_wallpaper)
#+end_src

#+begin_src lua
  awful.screen.connect_for_each_screen(function(s)
      -- Wallpaper
      set_wallpaper(s)

      -- Drop down terminal
      s.quake = lain.util.quake( {app = terminal,  followtag = true} )

      -- -- Each screen has its own tag table.
      -- awful.tag({ "1", "2", "3", "4", "5", "6", "7", "8", "9" }, s, awful.layout.layouts[1])
      -- Tags are shared with sharedtags!

      -- Create a promptbox for each screen
      s.mypromptbox = awful.widget.prompt()
      -- Create an imagebox widget which will contain an icon indicating which layout we're using.
      -- We need one layoutbox per screen.
      s.mylayoutbox = awful.widget.layoutbox(s)
      s.mylayoutbox:buttons(gears.table.join(
                              awful.button({ }, 1, function () awful.layout.inc( 1) end),
                              awful.button({ }, 3, function () awful.layout.inc(-1) end),
                              awful.button({ }, 4, function () awful.layout.inc( 1) end),
                              awful.button({ }, 5, function () awful.layout.inc(-1) end)))
      -- Create a taglist widget
      s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = taglist_buttons
      }

      -- Create a tasklist widget
      s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons
      }

      -- Create the wibox
      s.mywibox = awful.wibar({ position = "top", screen = s })

      -- Add widgets to the wibox
      s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
          layout = wibox.layout.fixed.horizontal,
          mylauncher,
          s.mytaglist,
          s.mypromptbox,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets
          layout = wibox.layout.fixed.horizontal,
          mykeyboardlayout,
          wibox.widget.systray(),
          mytextclock,
          s.mylayoutbox,
        },
      }
  end)
  -- }}}
#+end_src

* Mouse bindings
#+begin_src lua
  -- {{{ Mouse bindings
  root.buttons(gears.table.join(
                 awful.button({ }, 3, function () mymainmenu:toggle() end),
                 awful.button({ }, 4, awful.tag.viewnext),
                 awful.button({ }, 5, awful.tag.viewprev)
  ))
  -- }}}
#+end_src

* Key bindings
** Initialize key object
#+begin_src lua
  globalkeys = gears.table.join()
#+end_src
** Tag navigation
#+begin_src lua
  globalkeys = gears.table.join(
    globalkeys
    , awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
      {description = "view previous", group = "tag"})
    , awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
      {description = "view next", group = "tag"})
    -- , awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
    --           {description = "go back", group = "tag"}),
    , awful.key({ modkey,           }, "b", awful.tag.history.restore,
      {description = "go back", group = "tag"})
  )
#+end_src
** Client navigation
#+begin_src lua
  globalkeys = gears.table.join(
    globalkeys
    , awful.key({ modkey }, "h",
      function()
        awful.client.focus.global_bydirection("left")
        if client.focus then client.focus:raise() end
      end,
      {description = "focus left", group = "client"})
    , awful.key({ modkey,           }, "j",
      function ()
        -- awful.client.focus.byidx( 1)
        awful.client.focus.global_bydirection("down")
      end,
      {description = "focus next by index", group = "client"}
               )
    , awful.key({ modkey,           }, "k",
      function ()
        -- awful.client.focus.byidx(-1)
        awful.client.focus.global_bydirection("up")
      end,
      {description = "focus previous by index", group = "client"}
               )
    , awful.key({ modkey }, "l",
      function()
        awful.client.focus.global_bydirection("right")
        if client.focus then client.focus:raise() end
      end,
      {description = "focus right", group = "client"})
    , awful.key({ modkey,           }, "Tab",
      function ()
        awful.client.focus.history.previous()
        if client.focus then
          client.focus:raise()
        end
      end,
      {description = "go back", group = "client"})
  )
#+end_src
** Program hotkeys
#+begin_src lua
  -- {{{ Key bindings
  globalkeys = gears.table.join(
    globalkeys
    , awful.key({ modkey }, "e", function () awful.spawn("emacsclient -nc") end,
      {description = "Open Emacs client", group = "launcher"})
    , awful.key({ modkey }, "F3", function () awful.spawn("thunar") end,
      {description = "Open File browser", group = "launcher"})
  )
#+end_src
** Rest
#+begin_src lua
  -- {{{ Key bindings
  globalkeys = gears.table.join(
    globalkeys
    , awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
      {description="show help", group="awesome"}),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
      {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
      {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
      {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
      {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
      {description = "jump to urgent client", group = "client"}),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
      {description = "open a terminal", group = "launcher"}),
    awful.key({ }, "F12", function () awful.screen.focused().quake:toggle() end,
      {description = "Drop down terminal", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
      {description = "reload awesome", group = "awesome"}),
    -- awful.key({ modkey, "Shift"   }, "q", awesome.quit,
    --           {description = "quit awesome", group = "awesome"}),

    -- awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
    --   {description = "increase master width factor", group = "layout"}),
    -- awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
    --   {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
      {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
      {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
      {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
      {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
      {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
      {description = "select previous", group = "layout"}),

    awful.key({ modkey, "Control" }, "n",
      function ()
        local c = awful.client.restore()
        -- Focus restored client
        if c then
          c:emit_signal(
            "request::activate", "key.unminimize", {raise = true}
          )
        end
      end,
      {description = "restore minimized", group = "client"}),

    -- Prompt
    awful.key({ modkey },            "r",     function () awful.screen.focused().mypromptbox:run() end,
      {description = "run prompt", group = "launcher"}),
    awful.key({ modkey }, "d", function () awful.spawn("rofi -matching fuzzy -show combi") end,
      {description = "rofi", group = "launcher"}),

    awful.key({ modkey }, "x",
      function ()
        awful.prompt.run {
          prompt       = "Run Lua code: ",
          textbox      = awful.screen.focused().mypromptbox.widget,
          exe_callback = awful.util.eval,
          history_path = awful.util.get_cache_dir() .. "/history_eval"
        }
      end,
      {description = "lua execute prompt", group = "awesome"}),
    -- Menubar
    awful.key({ modkey }, "z", function() menubar.show() end,
      {description = "show the menubar", group = "launcher"})
  )
#+end_src

** Clientkeys
#+begin_src lua
  clientkeys = gears.table.join(
    awful.key({ modkey,           }, "f",
      function (c)
        c.fullscreen = not c.fullscreen
        c:raise()
      end,
      {description = "toggle fullscreen", group = "client"}),
    -- awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
    --           {description = "close", group = "client"}),
    awful.key({ modkey, "Shift"   }, "q",      function (c) c:kill()                         end,
      {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
      {description = "toggle floating", group = "client"}),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
      {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
      {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
      {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
      function (c)
        -- The client currently has the input focus, so it cannot be
        -- minimized, since minimized clients can't have the focus.
        c.minimized = true
      end ,
      {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
      function (c)
        c.maximized = not c.maximized
        c:raise()
      end ,
      {description = "(un)maximize", group = "client"}),
    awful.key({ modkey, "Control" }, "m",
      function (c)
        c.maximized_vertical = not c.maximized_vertical
        c:raise()
      end ,
      {description = "(un)maximize vertically", group = "client"}),
    awful.key({ modkey, "Shift"   }, "m",
      function (c)
        c.maximized_horizontal = not c.maximized_horizontal
        c:raise()
      end ,
      {description = "(un)maximize horizontally", group = "client"})
  )
#+end_src

** Tag navigation and bindings
#+begin_src lua
  -- Bind all key numbers to tags.
  -- Be careful: we use keycodes to make it work on any keyboard layout.
  -- This should map on the top row of your keyboard, usually 1 to 9.
  for i = 1, 9 do
    globalkeys = gears.table.join(
      globalkeys,
      -- View tag only.
      awful.key({ modkey }, "#" .. i + 9,
        function ()
          -- local tag = screen.tags[i]
          -- local screen = awful.screen.focused()
          local tag = tags[i]
          if tag then
            tag:view_only()
            awful.screen.focus(tag.screen)
            -- sharedtags.viewonly(tag, screen)
          end
        end,
        {description = "view tag #"..i, group = "tag"}),
      -- Toggle tag display.
      awful.key({ modkey, "Control" }, "#" .. i + 9,
        function ()
          -- local tag = screen.tags[i]
          local screen = awful.screen.focused()
          local tag = tags[i]
          if tag then
            -- awful.tag.viewtoggle(tag)
            sharedtags.viewtoggle(tag, screen)
          end
        end,
        {description = "toggle tag #" .. i, group = "tag"}),

      -- Move tag to other screen (left or right)
      awful.key({ modkey}, "." ,
        function ()
          local tag = client.focus and client.focus.first_tag or nil
          local goal_screen = tag.screen:get_next_in_direction("right")
          if tag then
            sharedtags.viewonly(tag, goal_screen)
          end
        end,
        {description = "Move tag to screen to the right", group = "tag"}),
      awful.key({ modkey}, "," ,
        function ()
          local tag = client.focus and client.focus.first_tag or nil
          local goal_screen = tag.screen:get_next_in_direction("left")
          if tag then
            sharedtags.viewonly(tag, goal_screen)
          end
        end,
        {description = "Move tag to screen to the left", group = "tag"}),

      -- Move client to tag.
      awful.key({ modkey, "Shift" }, "#" .. i + 9,
        function ()
          if client.focus then
            -- local tag = client.focus.screen.tags[i]
            local tag = tags[i]
            if tag then
              client.focus:move_to_tag(tag)
            end
          end
        end,
        {description = "move focused client to tag #"..i, group = "tag"}),
      -- Toggle tag on focused client.
      awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
        function ()
          if client.focus then
            -- local tag = client.focus.screen.tags[i]
            local tag = tags[i]
            if tag then
              client.focus:toggle_tag(tag)
            end
          end
        end,
        {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
  end
#+end_src

** Mouse buttons
#+begin_src lua
  clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
    end),
    awful.button({ modkey }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
    end),
    awful.button({ modkey }, 3, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
    end)
  )
#+end_src

** Set keys
#+begin_src lua
  -- Set keys
  root.keys(globalkeys)
  -- }}}
#+end_src

* Rules
#+begin_src lua
  -- {{{ Rules
  -- Rules to apply to new clients (through the "manage" signal).
  awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
      }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
    }, properties = { floating = true }},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
                 }, properties = { titlebars_enabled = false }
    },

    -- Set Firefox to always map on the tag named "2" on screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { screen = 1, tag = "2" } },
  }
  -- }}}
#+end_src

* Signals, whatever that means
#+begin_src lua
  -- {{{ Signals
  -- Signal function to execute when a new client appears.
  client.connect_signal("manage", function (c)
                          -- Set the windows at the slave,
                          -- i.e. put it at the end of others instead of setting it master.
                          -- if not awesome.startup then awful.client.setslave(c) end

                          if awesome.startup
                            and not c.size_hints.user_position
                          and not c.size_hints.program_position then
                            -- Prevent clients from being unreachable after screen count changes.
                            awful.placement.no_offscreen(c)
                          end
  end)

  -- Add a titlebar if titlebars_enabled is set to true in the rules.
  client.connect_signal("request::titlebars", function(c)
                          -- buttons for the titlebar
                          local buttons = gears.table.join(
                            awful.button({ }, 1, function()
                                c:emit_signal("request::activate", "titlebar", {raise = true})
                                awful.mouse.client.move(c)
                            end),
                            awful.button({ }, 3, function()
                                c:emit_signal("request::activate", "titlebar", {raise = true})
                                awful.mouse.client.resize(c)
                            end)
                          )

                          awful.titlebar(c) : setup {
                            { -- Left
                              awful.titlebar.widget.iconwidget(c),
                              buttons = buttons,
                              layout  = wibox.layout.fixed.horizontal
                            },
                            { -- Middle
                              { -- Title
                                align  = "center",
                                widget = awful.titlebar.widget.titlewidget(c)
                              },
                              buttons = buttons,
                              layout  = wibox.layout.flex.horizontal
                            },
                            { -- Right
                              awful.titlebar.widget.floatingbutton (c),
                              awful.titlebar.widget.maximizedbutton(c),
                              awful.titlebar.widget.stickybutton   (c),
                              awful.titlebar.widget.ontopbutton    (c),
                              awful.titlebar.widget.closebutton    (c),
                              layout = wibox.layout.fixed.horizontal()
                            },
                            layout = wibox.layout.align.horizontal
                                                    }
  end)

  -- Enable sloppy focus, so that focus follows mouse.
  client.connect_signal("mouse::enter", function(c)
                          c:emit_signal("request::activate", "mouse_enter", {raise = false})
  end)

  client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
  client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
  -- }}}
#+end_src
