#+TITLE:Literate Spacemacs Config with Org-babel

* General
Config also in [[file:init.el]]. All the layers are there, also all things that are
customized in the original config file.

Hotkey to modify this config file.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "f e c"
    (lambda()
      (interactive)
      (find-file "~/.spacemacs.d/config.org")))
#+END_SRC

I like visual line mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'spacemacs/toggle-visual-line-navigation-on)
#+END_SRC

Smoother undo behavior
#+BEGIN_SRC emacs-lisp
  (setq evil-want-fine-undo t)
#+END_SRC
* Email
#+BEGIN_SRC emacs-lisp
  ;; Email in emacs with mu4e
  (setq mu4e-sent-folder "/Gmail/[Google Mail].All Mail"
        mu4e-drafts-folder "/Gmail/[Google Mail].Drafts"
        mu4e-trash-folder "/Gmail/[Google Mail].Bin"
        mu4e-refile-folder "/Gmail/[Google Mail].All Mail")
  ;; (setq mu4e-account-alist
  ;;       '(("gmail"
  ;;          ;; Under each account, set the account-specific variables you want.
  ;;          (mu4e-sent-messages-behavior delete)
  ;;          (mu4e-sent-folder "/Gmail/[Gmail]/.Sent Mail")
  ;;          (mu4e-drafts-folder "/gmail/[Gmail]/.Drafts")
  ;;          (user-mail-address "billy@gmail.com")
  ;;          (user-full-name "Billy"))
  ;;         ("college"
  ;;          (mu4e-sent-messages-behavior sent)
  ;;          (mu4e-sent-folder "/college/Sent Items")
  ;;          (mu4e-drafts-folder "/college/Drafts")
  ;;          (user-mail-address "bb15@college.edu")
  ;;          (user-full-name "Billy Bob 15"))))
  ;; (mu4e/mail-account-reset)
#+END_SRC

Also, this was initially in user-init
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
#+END_SRC
* Org
** General settings
*** Inline images
#+BEGIN_SRC emacs-lisp
  ;; Inline images
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width '(800))
#+END_SRC
*** Pretty entities
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
*** Other modules
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-subtask-reset)
#+END_SRC

*** Order can be super useful!
#+BEGIN_SRC emacs-lisp
  ;; Parents can only be marked as DONE if children tasks are undone
  ;; with the "ORDERED" property TODO children is blocked until all earlier siblings are marked DONE
  (setq org-enforce-todo-dependencies t)
#+END_SRC

*** Autosave
#+BEGIN_SRC emacs-lisp
  ;; Automatically save org buffers when agenda is open
  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
  ;;             (auto-save-mode)))
  ;; Save even more stuff
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+END_SRC

*** Archive tag to gray out things I do not need
#+BEGIN_SRC emacs-lisp
  (setq org-archive-tag "inactive")
#+END_SRC

*** Start org with some useful modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC
** org-habit
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-habit)

  (setq org-habit-graph-column 50)
#+END_SRC
** org-refile
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(("~/Dropbox/org/todo.org" :maxlevel . 2)
                             ("~/Dropbox/org/references.org" :maxlevel . 1)
                             ("~/Dropbox/org/thesis.org" :level . 1)
                             (nil . (:level . 1))
                             ))
#+END_SRC

This would be awesome: Refiling by incrementally choosing a path. However,
completion does not work well, and without that it is not very helpful.
#+BEGIN_SRC emacs-lisp
  ;; (setq org-refile-use-outline-path 'file)
#+END_SRC
** org-babel and org-src
Org-babel languages
#+BEGIN_SRC emacs-lisp
  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((C . t)
  ;;    (python . t)
  ;;    (gnuplot . t)
  ;;    ))
#+END_SRC

Correct indentation in org-babel source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC
** Column view
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-overriding-columns-format "%CATEGORY(Category) %42ITEM(Details) %TAGS(Tags) %7TODO(To Do) %5Effort(Time){:} %7CLOCKSUM(Clocked){:}")
  ;; (setq org-agenda-overriding-columns-format "%7TODO(To Do) %38ITEM(Details) %TAGS(Context) %5Effort(Time){:} %6CLOCKSUM{:}")
#+END_SRC
** Latex exports
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process (list "latexmk -pdf %f"))

  (add-to-list 'org-latex-classes
               '("letter" "\\documentclass{letter}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (evil-leader/set-key-for-mode 'org-mode "e p" 'org-latex-export-to-pdf)
#+END_SRC
** Org todo keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN PROGRESS(p)" "INACTIVE(i)" "|" "CANCELLED(c)" "DONE(d)")
          (sequence "TOREAD(r)" "TOWATCH(w)" "TOLISTEN(l)" "|")
          ))
  (setq org-todo-keyword-faces
        '(("TOREAD" . "#5e8d87")
          ("TOWATCH" . "#85678f")
          ("TOLISTEN" . "#85678f")
          ("INACTIVE" . "#707880")
          ;; ("HABIT" . "#de935f")
          ("CANCELLED" . "#c5c8c6")
          ))
#+END_SRC
** Hotkeys
To better follow the spacemacs mnemonics instead of C-c C-x ...
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "U" 'org-update-all-dblocks)
#+END_SRC
** Google Calendar
#+BEGIN_SRC emacs-lisp
  ;; Function to read lines of a file and output a list
  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))
  ;; Read lines from gcal.auth and store them in the variable
  (setq auth-lines (read-lines "~/gcal.auth"))
  ;; Google Calendar
  (setq org-gcal-client-id (car auth-lines)
        org-gcal-client-secret (car (cdr auth-lines)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Google Calendar
  (setq org-gcal-file-alist '(("nathanael.bosch@gmail.com" . "~/Dropbox/org/gcal/gcal.org")
                              ("y5ka3vijk107hk59p3ruo8b7mq8@group.calendar.google.com" . "~/Dropbox/org/gcal/vacances.org")
                              ("43ntc9b5o132nim5q8pnin4hm8@group.calendar.google.com" . "~/Dropbox/org/gcal/uni.org")
                              ("67bvrtshu9ufjh2bk4c3vul8vc@group.calendar.google.com" . "~/Dropbox/org/gcal/urlaube.org")
                              ("5g7i1tndcav3oulm0c9ktb0v1bblscmr@import.calendar.google.com" . "~/Dropbox/org/gcal/tumonline.org")
                              ))
  (add-hook 'org-capture-after-finalize-hook 'google-calendar/sync-cal-after-capture)

#+END_SRC
** org-ref
Sources:
- https://codearsonist.com/reading-for-programmers
- https://github.com/jkitchin/org-ref

Goal is mostly to find the perfect paper workflow with emacs org-mode.
*** General Variables
Basically three parts:
- global bibliography file
- my notes
- pdf directory
These have to be defined in multiple locations as I use multiple different
libraries for this task
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/MEGA/papers/references.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/MEGA/papers/notes.org"
        org-ref-default-bibliography '("~/MEGA/papers/references.bib")
        org-ref-pdf-directory "~/MEGA/papers/lib/")

  (setq helm-bibtex-notes-path "~/MEGA/papers/notes.org"
        helm-bibtex-bibliography "~/MEGA/papers/references.bib"
        helm-bibtex-library-path "~/MEGA/papers/lib")

  ;; Further variables for helm-bibtex
  (setq bibtex-completion-bibliography "~/MEGA/papers/references.bib"
        bibtex-completion-library-path "~/MEGA/papers/lib"
        bibtex-completion-notes-path "~/MEGA/papers/notes.org")

  ;; Download directory
  (setq biblio-download-directory "~/MEGA/papers/lib")
#+END_SRC
*** Custom Hotkeys
To access interleave mode and helm-bibtex
#+BEGIN_SRC emacs-lisp
  (defun clock-in-and-interleave ()
    (interactive)
    (org-clock-in)
    (interleave-mode))

  (evil-leader/set-key-for-mode 'org-mode "I" 'clock-in-and-interleave)
  ;; (evil-leader/set-key-for-mode 'org-mode "I" 'interleave-mode)
  (evil-leader/set-key-for-mode 'org-mode "B" 'helm-bibtex)
  (evil-leader/set-key-for-mode 'bibtex-mode "B" 'helm-bibtex)
#+END_SRC
*** org-ref notes
Customized the structure of the default notes entry, to contain more information
(such as pdf), use TOREAD instead of TODO, and automatically enable interleave mode.
#+BEGIN_SRC emacs-lisp
  (setq org-ref-note-title-format "** TOREAD %t
  :PROPERTIES:
  :Custom_ID: %k
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
  :VOLUME: %v
  :PAGES: %p
  :DOI: %D
  :URL: %U
  :BIBTEX_LABEL: %k
  :PDF: %F
  :INTERLEAVE_PDF: %F
  :END:
  ")
#+END_SRC
*** PDF opening
#+BEGIN_SRC emacs-lisp
  ;; open pdf with system pdf viewer (works on mac)
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))

  ;; alternative
  ;; (setq bibtex-completion-pdf-open-function 'org-open-file)

  (setq org-ref-open-pdf-function
        (lambda (fpath)
          (start-process "zathura" "*helm-bibtex-zathura*" "/usr/bin/zathura" fpath)))
#+END_SRC
** org-capture
My templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* TODO %?")
          ("g" "Google Calendar Entry" entry (file "~/Dropbox/org/gcal/gcal.org")
           "* TODO %?")
          ;; ("w" "Weekly review" entry (file+olp+datetree "~/Dropbox/org/reviews.org")
          ;;  (file "~/Dropbox/org/weeklyreview_template.org"))
          ;; ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
          ;;  "* %?\nEntered on %U\n  %i\n  %a")
           ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
           "* %?\n\nEntered on %U\n  %i")
           ("w" "Wäsche" entry (file+headline "~/Dropbox/org/todo.org" "Misc")
           "* Wäsche [%]\n:PROPERTIES:\n:ORDERED:  t\n:END:\n** TODO Wäsche: In die Maschine und machen\nSCHEDULED: %t\n** TODO Wäsche: Aufhängen\nSCHEDULED: %t\n** TODO Wäsche: Abhängen\nSCHEDULED: %t\n** TODO Wäsche: Aufräumen\nSCHEDULED: %t")
           ("m" "Masterpraktikum")
           ("mg" "Masterpraktikum: General" entry (file+headline "~/Dropbox/org/masterpraktikum.org" "General")
            "* TODO %?")
           ("mc" "Masterpraktikum: Clustering" entry (file+olp "~/Dropbox/org/masterpraktikum.org" "Clustering" "Tasks")
            "* TODO %?")
           ("ma" "Masterpraktikum: Anomaly Detection 2" entry (file+olp "~/Dropbox/org/masterpraktikum.org" "Anomaly Detection 2" "Tasks")
            "* TODO %?")
           ("r" "To read" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
            "* TOREAD %?")
           ("p" "Paper" entry (file+headline "~/MEGA/papers/notes.org" "Inbox")
            "* TOREAD %?")
  ))
#+END_SRC
** org-agenda
Default agenda files
#+BEGIN_SRC emacs-lisp
  ;; Default folder for agenda files?
  (setq org-agenda-files '("~/Dropbox/org/"
                           "~/Dropbox/org/gcal/"
                           "~/MEGA/papers/notes.org"))
  (with-eval-after-load 'org (setq org-default-notes-file '"~/Dropbox/org/todo.org"))
#+END_SRC

Custom views
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        ;; (append org-agenda-custom-commands
                '(("c" "Upcoming week - Columns" agenda ""
                   ((org-agenda-span 'week)
                    (org-agenda-filter-preset '("-habit"))
                    (org-agenda-view-columns-initially t)
                    ))

                  ("n" "Next Actions"
                   ((todo "TODO"
                    ((org-agenda-filter-preset '("-someday"))
                     (org-agenda-todo-ignore-scheduled t)
                     ))
                    (tags-todo "habit")
                    (agenda ""
                     ((org-agenda-entry-types '(:deadline))
                      (org-agenda-span 1)
                      (org-deadline-warning-days 90)
                      (org-agenda-time-grid nil)
                      (org-agenda-overriding-header "Upcoming Deadlines")
                      )))
                   ;; ((org-agenda-compact-blocks t))
                   )
                  ("N" "Next Actions - Including scheduled tasks"
                   ((todo "TODO"
                          ((org-agenda-filter-preset '("-someday"))
                           ;; (org-agenda-todo-ignore-scheduled t)
                           (org-deadline-warning-days 90)))
                    (tags-todo "habit")
                    (agenda ""
                            ((org-agenda-entry-types '(:deadline))
                             (org-agenda-span 1)
                             (org-deadline-warning-days 90)
                             (org-agenda-time-grid nil)
                             (org-agenda-overriding-header "Upcoming Deadlines")
                             )))
                   ;; ((org-agenda-compact-blocks t))
                   )

                  ;; Special types
                  ("s" "Someday" tags-todo "someday"
                   ((org-agenda-filter-preset '("+someday"))
                    (org-use-tag-inheritance nil)
                    (org-agenda-todo-ignore-with-date nil)))
                  ("r" "To read" todo "TOREAD"
                   ((org-agenda-sorting-strategy '(priority-down tag-down))
                    ))
                  ("R" "To read - including 'someday'" todo "TOREAD"
                   ((org-agenda-filter-preset '(""))
                    (org-agenda-sorting-strategy '(priority-down tag-down))
                    ))
                  ("w" "To watch" todo "TOWATCH"
                   ((org-agenda-filter-preset '(""))
                    (org-agenda-view-columns-initially t)
                    (org-agenda-sorting-strategy '(priority-down tag-down))
                    ))
                  ("w" "To watch - including 'someday'" todo "TOWATCH"
                   ((org-agenda-view-columns-initially t)
                    (org-agenda-sorting-strategy '(priority-down tag-down))
                    ))
                  ("l" "To listen" todo "TOLISTEN"
                   ((org-agenda-filter-preset '(""))
                    (org-agenda-sorting-strategy '(priority-down tag-down))
                    ))
                  ("p" "Papers" todo "TOREAD"
                   ((org-agenda-files '("~/MEGA/papers/notes.org")))
                   )
                  ;; ("P" "Papers - Full List"
                  ;;  ;; alltodo ""
                  ;;  tags"CATEGORY=\"papers\""
                  ;;  ((org-agenda-files '("~/MEGA/papers/notes.org"))
                  ;;   (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
                  ;;   )
                  ;;  )

                  ;; Contexts
                  ("h" "@Home"
                   ((tags-todo "@home"
                         ((org-agenda-todo-ignore-with-date nil)))
                   ))
                  ("u" "@Uni"
                   ((tags-todo "@uni"
                          ((org-agenda-todo-ignore-with-date nil)))
                    ))

                  ("d" "Upcoming deadlines" agenda ""
                   ((org-agenda-entry-types '(:deadline))
                    (org-agenda-span 1)
                    (org-deadline-warning-days 60)
                    (org-agenda-overriding-header "Upcoming Deadlines")
                    (org-agenda-time-grid nil)))

                  )
                )
#+END_SRC

General agenda settings
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-filter-preset '("-someday"))
  (setq org-agenda-regexp-filter-preset '("-WAITING"))
  (setq org-agenda-log-mode-items '(closed clock state))

  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
  ;; (setq org-agenda-window-setup 'current-window)
  ;; (setq org-agenda-window-setup 'only-window)

  ;; Start agenda in day mode
  (setq org-agenda-span 1)
  ;; Start week on monday
  (setq org-agenda-start-on-weekday 1)

  ;; Tasks that cannot be done because of dependencies should not clutter the agenda
  ;; t grays them out, 'invisible makes them disappear
  ;; (setq org-agenda-dim-blocked-tasks t)
  (setq org-agenda-dim-blocked-tasks 'invisible)

  ;; Better overview in agenda with my recurring tasks
  (setq org-agenda-show-future-repeats 'next)

  ;; Include archived files
  (setq org-agenda-archives-mode t)
#+END_SRC
** Clocking
#+BEGIN_SRC emacs-lisp
  (setq org-clock-out-when-done t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-report-include-clocking-task t)

  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3 :fileskip0 t :compact t))

  ;; This seems to lead to some unpleasant behavior
  ;; (add-hook 'kill-emacs-hook #'org-clock-out)

  (spacemacs/toggle-mode-line-org-clock-on)
#+END_SRC
** Exports
When I write org to not write LaTeX
#+BEGIN_SRC emacs-lisp
  ;; remove comments from org document for use with export hook
  ;; https://emacs.stackexchange.com/questions/22574/orgmode-export-how-to-prevent-a-new-line-for-comment-lines
  (defun delete-org-comments (backend)
    (loop for comment in (reverse (org-element-map (org-element-parse-buffer)
                                      'comment 'identity))
          do
          (setf (buffer-substring (org-element-property :begin comment)
                                  (org-element-property :end comment))
                "")))
  ;; add to export hook
  (add-hook 'org-export-before-processing-hook 'delete-org-comments)
#+END_SRC
** org-download
#+BEGIN_SRC emacs-lisp
  ;; Not optimal, but otherwise it creates wayy too many folders
  (setq-default org-download-image-dir "~/Dropbox/org/images")
#+END_SRC
** Misc
To be able to press "S" in the agenda ;)
#+BEGIN_SRC emacs-lisp
  ;; Set long and latiude for sunset
  (setq calendar-latitude 48.248872)
  (setq calendar-longitude 11.653248)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  ;; Start magit commit in insert mode
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC
* LaTeX
Ask me about the TeX master file if unsure
#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC
* Fira Code
#+BEGIN_SRC emacs-lisp
  (defun setup-fira-code ()
    ;; Fira code stuff - copied from PierreSp
    ;; This works when using emacs --daemon + emacsclient
    (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
    ;; This works when using emacs without server/client
    (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
    ;; I haven't found one statement that makes both of the above situations work, so I use both for now

    (defconst fira-code-font-lock-keywords-alist
      (mapcar (lambda (regex-char-pair)
                `(,(car regex-char-pair)
                  (0 (prog1 ()
                       (compose-region (match-beginning 1)
                                       (match-end 1)
                                       ;; The first argument to concat is a string containing a literal tab
                                       ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
              '(("\\(www\\)"                   #Xe100)
                ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
                ("\\(\\*\\*\\*\\)"             #Xe102)
                ("\\(\\*\\*/\\)"               #Xe103)
                ("\\(\\*>\\)"                  #Xe104)
                ("[^*]\\(\\*/\\)"              #Xe105)
                ("\\(\\\\\\\\\\)"              #Xe106)
                ("\\(\\\\\\\\\\\\\\)"          #Xe107)
                ("\\({-\\)"                    #Xe108)
                ;; ("\\(\\[\\]\\)"                #Xe109) This is the [] ligature and I don't like
                ("\\(::\\)"                    #Xe10a)
                ("\\(:::\\)"                   #Xe10b)
                ("[^=]\\(:=\\)"                #Xe10c)
                ("\\(!!\\)"                    #Xe10d)
                ("\\(!=\\)"                    #Xe10e)
                ("\\(!==\\)"                   #Xe10f)
                ("\\(-}\\)"                    #Xe110)
                ("\\(--\\)"                    #Xe111)
                ("\\(---\\)"                   #Xe112)
                ("\\(-->\\)"                   #Xe113)
                ("[^-]\\(->\\)"                #Xe114)
                ("\\(->>\\)"                   #Xe115)
                ("\\(-<\\)"                    #Xe116)
                ("\\(-<<\\)"                   #Xe117)
                ("\\(-~\\)"                    #Xe118)
                ("\\(#{\\)"                    #Xe119)
                ("\\(#\\[\\)"                  #Xe11a)
                ("\\(##\\)"                    #Xe11b)
                ("\\(###\\)"                   #Xe11c)
                ("\\(####\\)"                  #Xe11d)
                ("\\(#(\\)"                    #Xe11e)
                ("\\(#\\?\\)"                  #Xe11f)
                ("\\(#_\\)"                    #Xe120)
                ("\\(#_(\\)"                   #Xe121)
                ("\\(\\.-\\)"                  #Xe122)
                ("\\(\\.=\\)"                  #Xe123)
                ("\\(\\.\\.\\)"                #Xe124)
                ("\\(\\.\\.<\\)"               #Xe125)
                ("\\(\\.\\.\\.\\)"             #Xe126)
                ("\\(\\?=\\)"                  #Xe127)
                ("\\(\\?\\?\\)"                #Xe128)
                ("\\(;;\\)"                    #Xe129)
                ("\\(/\\*\\)"                  #Xe12a)
                ("\\(/\\*\\*\\)"               #Xe12b)
                ("\\(/=\\)"                    #Xe12c)
                ("\\(/==\\)"                   #Xe12d)
                ("\\(/>\\)"                    #Xe12e)
                ("\\(//\\)"                    #Xe12f)
                ("\\(///\\)"                   #Xe130)
                ("\\(&&\\)"                    #Xe131)
                ("\\(||\\)"                    #Xe132)
                ("\\(||=\\)"                   #Xe133)
                                          ;("[^|]\\(|=\\)"                #Xe134)
                ("\\(|>\\)"                    #Xe135)
                ("\\(\\^=\\)"                  #Xe136)
                ("\\(\\$>\\)"                  #Xe137)
                ("\\(\\+\\+\\)"                #Xe138)
                ("\\(\\+\\+\\+\\)"             #Xe139)
                ("\\(\\+>\\)"                  #Xe13a)
                ("\\(=:=\\)"                   #Xe13b)
                                          ;("[^!/]\\(==\\)[^>]"           #Xe13c)
                ("\\(===\\)"                   #Xe13d)
                ("\\(==>\\)"                   #Xe13e)
                                          ;("[^=]\\(=>\\)"                #Xe13f)
                ("\\(=>>\\)"                   #Xe140)
                ("\\(<=\\)"                    #Xe141)
                ("\\(=<<\\)"                   #Xe142)
                ("\\(=/=\\)"                   #Xe143)
                ("\\(>-\\)"                    #Xe144)
                ("\\(>=\\)"                    #Xe145)
                ("\\(>=>\\)"                   #Xe146)
                ("[^-=]\\(>>\\)"               #Xe147)
                ("\\(>>-\\)"                   #Xe148)
                ("\\(>>=\\)"                   #Xe149)
                ("\\(>>>\\)"                   #Xe14a)
                ("\\(<\\*\\)"                  #Xe14b)
                ("\\(<\\*>\\)"                 #Xe14c)
                ("\\(<|\\)"                    #Xe14d)
                ("\\(<|>\\)"                   #Xe14e)
                ("\\(<\\$\\)"                  #Xe14f)
                ("\\(<\\$>\\)"                 #Xe150)
                ("\\(<!--\\)"                  #Xe151)
                ("\\(<-\\)"                    #Xe152)
                ("\\(<--\\)"                   #Xe153)
                ("\\(<->\\)"                   #Xe154)
                ("\\(<\\+\\)"                  #Xe155)
                ("\\(<\\+>\\)"                 #Xe156)
                ("\\(<=\\)"                    #Xe157)
                ("\\(<==\\)"                   #Xe158)
                ("\\(<=>\\)"                   #Xe159)
                ("\\(<=<\\)"                   #Xe15a)
                ("\\(<>\\)"                    #Xe15b)
                ("[^-=]\\(<<\\)"               #Xe15c)
                ("\\(<<-\\)"                   #Xe15d)
                ("\\(<<=\\)"                   #Xe15e)
                ("\\(<<<\\)"                   #Xe15f)
                ("\\(<~\\)"                    #Xe160)
                ("\\(<~~\\)"                   #Xe161)
                ("\\(</\\)"                    #Xe162)
                ("\\(</>\\)"                   #Xe163)
                ("\\(~@\\)"                    #Xe164)
                ("\\(~-\\)"                    #Xe165)
                ("\\(~=\\)"                    #Xe166)
                ("\\(~>\\)"                    #Xe167)
                ("[^<]\\(~~\\)"                #Xe168)
                ("\\(~~>\\)"                   #Xe169)
                ("\\(%%\\)"                    #Xe16a)
                ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
                ("[^:=]\\(:\\)[^:=]"           #Xe16c)
                ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
                ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f)
                )))

    (defun add-fira-code-symbol-keywords ()
      (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

    (add-hook 'prog-mode-hook
              #'add-fira-code-symbol-keywords)
    )

#+END_SRC
* Misc
** Comment with ctrl-shift-c
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-c") 'evil-commentary-line)
#+END_SRC
** Scroll margin
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 1)
#+END_SRC

** PDF
open pdfs scaled to fit page
#+BEGIN_SRC emacs-lisp
  (setq-default pdf-view-display-size 'fit-page)
#+END_SRC

** Hitting "kj" fast makes me escape insert mode
#+BEGIN_SRC emacs-lisp
  ;; (setq-default evil-escape-key-sequence "kj")
#+END_SRC

** Auto-refresh buffers when files changed on disk
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** libnotify
#+BEGIN_SRC emacs-lisp
  ;; (setq alert-default-style 'libnotify)
#+END_SRC

** Visual line mode when working with text based content
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'text-mode-hook 'spacemacs/toggle-visual-line-navigation-on)
#+END_SRC
