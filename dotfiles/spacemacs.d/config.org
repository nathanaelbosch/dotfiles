#+TITLE:Literate Spacemacs Config with Org-babel

* General
Config also in [[file:init.el]]. All the layers are there, also all things that are
customized in the original config file.

** Hotkey to modify this config file.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "f e c"
    (lambda()
      (interactive)
      (find-file "~/.spacemacs.d/config.org")))
#+END_SRC

** I like visual line mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'spacemacs/toggle-visual-line-navigation-on)
#+END_SRC

** Smoother undo behavior
#+BEGIN_SRC emacs-lisp
  (setq evil-want-fine-undo t)
#+END_SRC
** Better vertical splitting
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 160)
#+END_SRC
** Comment with ctrl-shift-c
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-S-c") 'evil-commentary-line)
  (global-set-key (kbd "C-S-c") 'evilnc-comment-or-uncomment-lines)
#+END_SRC
** Scroll margin
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 1)
#+END_SRC

** PDF
open pdfs scaled to fit page
#+BEGIN_SRC emacs-lisp
  (setq-default pdf-view-display-size 'fit-page)
#+END_SRC

** Hitting "kj" fast makes me escape insert mode
#+BEGIN_SRC emacs-lisp
  ;; (setq-default evil-escape-key-sequence "kj")
#+END_SRC

** Auto-refresh buffers when files changed on disk
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** libnotify
#+BEGIN_SRC emacs-lisp
  ;; (setq alert-default-style 'libnotify)
#+END_SRC

** Visual line mode when working with text based content
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'text-mode-hook 'spacemacs/toggle-visual-line-navigation-on)
#+END_SRC

** Show time and date in modeline
#+begin_src emacs-lisp
  (setq display-time-day-and-date t)
#+end_src

** Pop-up shell
#+begin_src emacs-lisp
  ;; (setq shell-pop-universal-key "<f12>")
  (setq shell-default-shell 'eshell)
  (setq shell-pop-autocd-to-working-dir nil)
  (global-set-key (kbd "<f12>") 'spacemacs/default-pop-shell)
  (global-set-key (kbd "<s-f12>") 'spacemacs/default-pop-shell)
#+end_src

** Auth-info
#+begin_src emacs-lisp
  (setq auth-sources
        '((:source "~/.authinfo.gpg")))
#+end_src

** Nicer Treemacs
#+begin_src emacs-lisp
  (setq doom-themes-treemacs-theme
        ;; "doom-colors"
        "doom-atom"
        )
  (doom-themes-treemacs-config)
#+end_src

** Emacs-i3 window movement integration
First define my custom windmove functions
#+begin_src emacs-lisp
  (defun i3-windmove-left ()
    (interactive)
    (condition-case nil
        (windmove-left)
      (error (shell-command "i3-msg focus left"))))

  (defun i3-windmove-right ()
    (interactive)
    (condition-case nil
        (windmove-right)
      (error (shell-command "i3-msg focus right"))))

  (defun i3-windmove-up ()
    (interactive)
    (condition-case nil
        (windmove-up)
      (error (shell-command "i3-msg focus up"))))

  (defun i3-windmove-down ()
    (interactive)
    (condition-case nil
        (windmove-down)
      (error (shell-command "i3-msg focus down"))))
#+end_src

#+RESULTS:
: i3-windmove-down

Set custom hotkeys
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s-h") 'i3-windmove-left)
  (global-set-key (kbd "C-s-j") 'i3-windmove-down)
  (global-set-key (kbd "C-s-k") 'i3-windmove-up)
  (global-set-key (kbd "C-s-l") 'i3-windmove-right)
#+end_src

#+RESULTS:
: i3-windmove-right
* Email
** Contexts
#+BEGIN_SRC emacs-lisp
  (setq mu4e-contexts
   `( ,(make-mu4e-context
       :name "gmail"
       :match-func (lambda (msg) (when msg
         (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
       :vars '(
               (user-mail-address . "nathanael.bosch@gmail.com")
               (user-full-name . "Nathanael Bosch")
               (mu4e-trash-folder . "/Gmail/[Google Mail].Bin")
               (mu4e-refile-folder . "/Gmail/[Google Mail].Archive")
               (mu4e-sent-folder . "/Gmail/[Google Mail].Sent Mail")
               (mu4e-drafts-folder . "/Gmail/[Google Mail].Drafts")
               ))
     ))
#+END_SRC

** Send Emails
#+BEGIN_SRC emacs-lisp
  (setq mail-user-agent 'mu4e-user-agent  ; set mua header in mails
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-sendmail-f-is-evil t
        message-sendmail-function 'message-sendmail-with-sendmail
        send-mail-function 'message-send-mail-with-sendmail
        ;; sendmail-program "/home/jonas/bin/msmtpqueue/msmtp-enqueue.sh"
        sendmail-program "sendmail"
        message-kill-buffer-on-exit t     ; kill old messages when sent
        message-send-mail-function 'message-send-mail-with-sendmail
        message-forward-before-signature nil
        message-cite-reply-position 'above
  )

  (defun msmtpsq-fail-sentinel (process event)
    "Informs the user if the process has failed"
    (cond ((eq (process-status process) 'exit)
           (message "msmtpq-runqueue has succeeded")
           (let ((proc-buf (process-buffer process)))
             (when (buffer-name proc-buf)
               (with-current-buffer proc-buf
                 (set-buffer-modified-p nil)
                 (kill-buffer proc-buf)))))
          ((memq (process-status process) '(failed signal))
           (lwarn '(msmtp) :error "msmtpq-runqueue has failed! For info see %s" (process-buffer process)))))

  (defun msmtpq-runqueue ()
    "Runs the msmtp queue.

  Uses the msmtpq-runqueue.sh script provided by the msmtp
  package. In these scripts the queue directory can be set, see
  there for more information."
    (interactive)
    (let* ((buf-name "*msmtp-runqueue output*")
           (buffer  (get-buffer-create buf-name)))
      (with-current-buffer buffer
        (erase-buffer)
        (message "running msmtpqueue ...")
        (let ((proc
               (start-process
                "msmtpq-run" buffer
                "/home/jonas/bin/msmtpqueue/msmtp-runqueue.sh")))
          (set-process-sentinel proc 'msmtpsq-fail-sentinel)))))

  ;; (define-key 'mu4e-main-mode-map    (kbd "C-c C-r") 'msmtpq-runqueue)
  ;; (define-key 'mu4e-headers-mode-map (kbd "C-c C-r") 'msmtpq-runqueue)
  ;; (define-key 'mu4e-view-mode-map    (kbd "C-c C-r") 'msmtpq-runqueue)

  ;; Don't keep message buffer around
  (setq message-kill-buffer-on-exit t)
#+END_SRC

*** Org
#+begin_src emacs-lisp
  (setq org-mu4e-convert-to-html t)
#+end_src

** HTML Mails with images

#+begin_src emacs-lisp
  ;; (setq
  ;;  mu4e-html2text-command "w3m -T text/html"
  ;;  mu4e-view-prefer-html t
  ;;  )
#+end_src

#+begin_src emacs-lisp
  ;; enable inline images
  ;; (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  ;; (when (fboundp 'imagemagick-register-types)
  ;;   (imagemagick-register-types))
#+end_src

Otherwise, open in a browser
#+begin_src emacs-lisp
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

** Pandoc for HTML
Seems not bad actually
#+begin_src emacs-lisp
  ;; (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
#+end_src

** Visual line mode hook
#+begin_src emacs-lisp
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
#+end_src

** Check for supposed attachments prior to sending them
#+begin_src emacs-lisp
  (defvar my-message-attachment-regexp "\\(
                                        [Ww]e send\\|
                                        [Ii] send\\|
                                        attach\\|
                                        [aA]ngehängt\\|
                                        [aA]nhang\\|
                                        [sS]chicke\\|
                                        angehaengt\\|
                                        haenge\\|
                                        hänge\\)")
  (defun my-message-check-attachment nil
    "Check if there is an attachment in the message if I claim it."
    (save-excursion
      (message-goto-body)
      (when (search-forward-regexp my-message-attachment-regexp nil t nil)
        (message-goto-body)
        (unless (or (search-forward "<#part" nil t nil)
                    (message-y-or-n-p
                     "No attachment. Send the message ?" nil nil))
          (error "No message sent")))))
  (add-hook 'message-send-hook 'my-message-check-attachment)
#+end_src

** gnus view
#+begin_src emacs-lisp
  ;; (setq mu4e-view-use-gnus t)
#+end_src
** Link to message, not headers
#+begin_src emacs-lisp
  (setq org-mu4e-link-query-in-headers-mode nil)
#+end_src
* Org
** General settings
*** Inline images
#+BEGIN_SRC emacs-lisp
  ;; Inline images
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width '(800))
#+END_SRC
*** Pretty entities
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
*** Reset subtask module
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-modules 'org-subtask-reset)
#+END_SRC

*** Order can be super useful!
#+BEGIN_SRC emacs-lisp
  ;; Parents can only be marked as DONE if children tasks are undone
  ;; with the "ORDERED" property TODO children is blocked until all earlier siblings are marked DONE
  (setq org-enforce-todo-dependencies t)
#+END_SRC

*** Autosave
#+BEGIN_SRC emacs-lisp
  ;; Automatically save org buffers when agenda is open
  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
  ;;             (auto-save-mode)))
  ;; Save even more stuff
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+END_SRC

*** Archive tag to gray out things I do not need
#+BEGIN_SRC emacs-lisp
  (setq org-archive-tag "inactive")
#+END_SRC

*** Start org with some useful modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC
** org-habit
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-habit)

  (setq org-habit-graph-column 50)
#+END_SRC
** org-refile
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(("~/Dropbox/org/todo.org" :maxlevel . 2)
                             ("~/Dropbox/org/references.org" :maxlevel . 1)
                             ("~/Dropbox/org/thesis.org" :level . 2)
                             (nil . (:level . 1))
                             ))
#+END_SRC

This would be awesome: Refiling by incrementally choosing a path. However,
completion does not work well, and without that it is not very helpful.
#+BEGIN_SRC emacs-lisp
  ;; (setq org-refile-use-outline-path 'file)
#+END_SRC
** org-chef
#+BEGIN_SRC emacs-lisp
  (use-package org-chef :ensure t)
#+END_SRC
** org-babel and org-src
Org-babel languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (python . t)
     (gnuplot . t)
     (shell . t)
     ))
#+END_SRC

Correct indentation in org-babel source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC
** Column view
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-overriding-columns-format "%CATEGORY(Category) %3PRIORITY  %42ITEM(Details) %TAGS(Tags) %7TODO(To Do) %5Effort(Time){:} %7CLOCKSUM(Clocked){:}")
  ;; (setq org-agenda-overriding-columns-format "%7TODO(To Do) %38ITEM(Details) %TAGS(Context) %5Effort(Time){:} %6CLOCKSUM{:}")
#+END_SRC
** Latex exports
#+BEGIN_SRC emacs-lisp
  ;; (setq org-latex-pdf-process (list "latexmk -pdf %f"))
  (setq org-latex-pdf-process (list
                               "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))

  (add-to-list 'org-latex-classes
               '("letter" "\\documentclass{letter}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("scrbook" "\\documentclass{scrbook}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (evil-leader/set-key-for-mode 'org-mode "e p"
    'org-latex-export-to-pdf)
  ;; (lambda () (interactive) (org-latex-export-to-pdf t)))
  (evil-leader/set-key-for-mode 'org-mode "e B"
    'org-beamer-export-to-pdf)
  (evil-leader/set-key-for-mode 'org-mode "e b"
    'org-beamer-export-to-latex)
  ;; (lambda () (interactive) (org-beamer-export-to-pdf t)))
  (evil-leader/set-key-for-mode 'org-mode "e t"
    'org-latex-export-to-latex)
#+END_SRC

Ability to ignore headings in the export, so that I can use them just to
structure and fold my text:
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines org-export-ignore-headlines))
#+end_src
** Org todo keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s!)" "WAITING(w@/!)" "INACTIVE(i)" "|" "CANCELLED(c@)" "DONE(d!)")
          (sequence "TOREAD(r)" "TOWATCH(W)" "TOLISTEN(l)" "|")
          (sequence "REMINDER(R)" "|")
          (sequence "|" "NOTE(N)")
          ))
  (setq org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#fb4934" :weight bold))
          ("TOREAD" . (:foreground "#d79921" :weight bold))
          ("TOWATCH" . (:foreground "#b16286" :weight bold))
          ("TOLISTEN" . (:foreground "#b16286" :weight bold))
          ("INACTIVE" . (:foreground "#a89984" :weight bold))
          ("WAITING" . (:foreground "#83a598" :weight bold))
          ("STARTED" . (:foreground "#fe8019" :weight bold))
          ("NOTE" . (:foreground "#fabd2f" :weight bold))
          ("CANCELLED" . (:foreground "#928374" :weight bold))
          ("1PASS" . (:foreground "#98971a" :weight bold))
          ("2PASS" . (:foreground "#98971a" :weight bold))
          ("3PASS" . (:foreground "#98971a" :weight bold))
          ("REMINDER" . "#8ec07c")
          ))
#+END_SRC
** Hotkeys
To better follow the spacemacs mnemonics instead of C-c C-x ...
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "U" 'org-update-all-dblocks)
#+END_SRC
** Google Calendar
#+BEGIN_SRC emacs-lisp
  ;; Function to read lines of a file and output a list
  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))
  ;; Read lines from gcal.auth and store them in the variable
  (setq auth-lines (read-lines "~/Dropbox/org/gcal.auth"))
  ;; Google Calendar
  (setq org-gcal-client-id (car auth-lines)
        org-gcal-client-secret (car (cdr auth-lines)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Google Calendar
  (setq org-gcal-file-alist '(("nathanael.bosch@gmail.com" . "~/Dropbox/org/gcal/gcal.org")
                              ("y5ka3vijk107hk59p3ruo8b7mq8@group.calendar.google.com" . "~/Dropbox/org/gcal/vacances.org")
                              ("43ntc9b5o132nim5q8pnin4hm8@group.calendar.google.com" . "~/Dropbox/org/gcal/uni.org")
                              ("67bvrtshu9ufjh2bk4c3vul8vc@group.calendar.google.com" . "~/Dropbox/org/gcal/urlaube.org")
                              ("5g7i1tndcav3oulm0c9ktb0v1bblscmr@import.calendar.google.com" . "~/Dropbox/org/gcal/tumonline.org")
                              ))
  (add-hook 'org-capture-after-finalize-hook 'google-calendar/sync-cal-after-capture)

#+END_SRC
** Paper workflow
Sources:
- https://codearsonist.com/reading-for-programmers
- https://github.com/jkitchin/org-ref

Goal is mostly to find the perfect paper workflow with emacs org-mode.
*** General Variables
Basically three parts:
- global bibliography file
- my notes
- pdf directory
These have to be defined in multiple locations as I use multiple different
libraries for this task
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/MEGA/papers/references.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/MEGA/papers/notes.org"
        org-ref-default-bibliography '("~/MEGA/papers/references.bib")
        org-ref-pdf-directory "~/MEGA/papers/lib/")

  (setq helm-bibtex-notes-path "~/MEGA/papers/notes.org"
        helm-bibtex-bibliography "~/MEGA/papers/references.bib"
        helm-bibtex-library-path "~/MEGA/papers/lib")

  ;; Further variables for helm-bibtex
  (setq bibtex-completion-bibliography "~/MEGA/papers/references.bib"
        bibtex-completion-library-path "~/MEGA/papers/lib"
        bibtex-completion-notes-path "~/MEGA/papers/notes.org")

  ;; Download directory
  (setq biblio-download-directory "~/MEGA/papers/lib")
#+END_SRC
*** Custom Hotkeys
To access interleave mode and helm-bibtex
#+BEGIN_SRC emacs-lisp
  (defun clock-in-and-interleave ()
    (interactive)
    (org-clock-in)
    (interleave-mode))

  ;; (evil-leader/set-key-for-mode 'org-mode "I" 'clock-in-and-interleave)
  ;; (evil-leader/set-key-for-mode 'org-mode "I" 'interleave-mode)
  ;; (evil-leader/set-key-for-mode 'org-mode "B" 'helm-bibtex)
  (evil-leader/set-key-for-mode 'bibtex-mode "B" 'helm-bibtex)
#+END_SRC
*** org-ref notes
Customized the structure of the default notes entry, to contain more information
(such as pdf), use TOREAD instead of TODO, and automatically enable interleave mode.
#+BEGIN_SRC emacs-lisp
  (setq org-ref-note-title-format "** TOREAD %t
  :PROPERTIES:
  :Custom_ID: %k
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
  :VOLUME: %v
  :PAGES: %p
  :DOI: %D
  :URL: %U
  :BIBTEX_LABEL: %k
  :PDF: %F
  :END:
  PDF: file:%F
  ")
#+END_SRC

*** PDF opening
#+BEGIN_SRC emacs-lisp
  ;; open pdf with system pdf viewer (works on mac)
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))

  ;; alternative
  ;; (setq bibtex-completion-pdf-open-function 'org-open-file)

  (setq org-ref-open-pdf-function
        (lambda (fpath)
          (start-process "zathura" "*helm-bibtex-zathura*" "/usr/bin/zathura" fpath)))
#+END_SRC
*** Cleveref
#+begin_src emacs-lisp
  (setq org-ref-default-ref-type "cref")
  (setq org-latex-prefer-user-labels t)
#+end_src
*** pdf-noter
#+begin_src emacs-lisp
  (setq org-noter-property-doc-file "PDF")
#+end_src
** org-capture
My templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* TODO %?\n%U")
          ("T" "Todo with Clipboard" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* TODO %?\n%U\n%c\n" :empty-lines 1)
          ("l" "Todo with link (e.g. for mail)" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* TODO %?\n%U\n%a\n")
          ("e" "Email" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* TODO %? email |- %:from: %:subject :EMAIL:\n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n")
          ;; ("g" "Google Calendar Entry" entry (file "~/Dropbox/org/gcal/gcal.org")
          ;;  "* TODO %?")
          ("n" "Note" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* NOTE %?\n%U" :empty-lines 1)
          ("N" "Note with Clipboard" entry (file+headline "~/Dropbox/org/todo.org" "Inbox")
           "* NOTE %?\n%U\n%c\n" :empty-lines 1)
          ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
           "* %?\n\nEntered on %U\n  %i")
          ("w" "Wäsche" entry (file+headline "~/Dropbox/org/todo.org" "Misc")
           "* Wäsche [%]\n:PROPERTIES:\n:ORDERED:  t\n:END:\n** TODO Wäsche: In die Maschine und machen\nSCHEDULED: %t\n** TODO Wäsche: Aufhängen\nSCHEDULED: %t\n** TODO Wäsche: Abhängen\nSCHEDULED: %t\n** TODO Wäsche: Aufräumen\nSCHEDULED: %t")
          ("c" "Cookbook" entry (file "~/Dropbox/org/cookbook.org")
           "%(org-chef-get-recipe-from-url)"
           :empty-lines 1)
          ("m" "Mail" entry
           ;; (file+olp things-file "Inbox" "Mails")
           (file+headline "~/Dropbox/org/todo.org" "Inbox")
           ;; Creates "* TODO <2019-05-01 Wed> FromName [[mu4e:msgid:uuid][MessageSubject]] :200ok:
           ;; Therefore Emails can be properly:
           ;;   - Used as tasks
           ;;   - Attributed tags
           ;;   - Ordered by priority
           ;;   - Scheduled
           ;;   - etc
           "* TODO %(org-insert-time-stamp (org-read-date nil t \"%:date\") nil t) %(from-name \"%:fromname\" \"%:fromaddress\" \"%:from\") %a \t :%(get-domainname \"%:toaddress\"):")
          ;; ("v" "Thesis journal" entry
          ;;  (file+olp+datetree "~/Projekte/masterthesis-learning-visionbased-control/journal/journal.org")
          ;;  "* %?\n\nEntered on %U\n  %i")
  ))
#+END_SRC
** org-agenda
Default agenda files
#+BEGIN_SRC emacs-lisp
  ;; Default folder for agenda files?
  (setq org-agenda-files '("~/Dropbox/org/"
                           "~/Dropbox/org/gcal/"
                           "~/MEGA/papers/notes.org"
                           ))
  ;; To append to the list
  ;; (mapcar '(lambda (file)
  ;;            (push file org-agenda-files))
  ;;         '("~/Dropbox/org/"
  ;;           "~/Dropbox/org/gcal/"
  ;;           "~/MEGA/papers/notes.org"
  ;;           )
  ;;         )

    (with-eval-after-load 'org (setq org-default-notes-file '"~/Dropbox/org/todo.org"))
#+END_SRC

Custom views
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("c" "Coding Projects" tags "coding-TODO=\"DONE\"" ())
          ("C" "Coding Projects Tree" tags-tree "coding-TODO=\"DONE\"" ())

          ("p" "Papers" todo "TOREAD" (
            (org-agenda-files '("/home/nath/MEGA/papers/notes.org"))
            (org-agenda-sorting-strategy '(priority-down tag-down))
            ))

          ;; GTD-like workflow; Currently unused, thus the hiding, but potentially very interesting!
          ("g" . "GTD")
          ("gc" "Upcoming week - Columns" agenda ""
           ((org-agenda-span 'week)
            (org-agenda-filter-preset '("-habit"))
            (org-agenda-view-columns-initially t)
            ))
          ("gn" "Next Actions"
           ((todo "TODO"
                  ((org-agenda-filter-preset '("-someday"))
                   (org-agenda-todo-ignore-scheduled 'future)
                   ))
            (tags-todo "habit")
            (agenda ""
                    ((org-agenda-entry-types '(:deadline))
                     (org-agenda-span 1)
                     (org-deadline-warning-days 90)
                     (org-agenda-time-grid nil)
                     (org-agenda-overriding-header "Upcoming Deadlines")
                     ))))
          ("gN" "Next Actions - Including scheduled tasks"
           ((todo "TODO"
                  ((org-agenda-filter-preset '("-someday"))
                   (org-agenda-todo-ignore-scheduled nil)
                   (org-deadline-warning-days 90)))
            (tags-todo "habit")
            (agenda ""
                    ((org-agenda-entry-types '(:deadline))
                     (org-agenda-span 1)
                     (org-deadline-warning-days 90)
                     (org-agenda-time-grid nil)
                     (org-agenda-overriding-header "Upcoming Deadlines")
                     ))))
          ("gs" "Someday" tags-todo "someday"
           ((org-agenda-filter-preset '("+someday"))
            (org-use-tag-inheritance nil)
            (org-agenda-todo-ignore-with-date nil)))
          ("gd" "Upcoming deadlines" agenda ""
           ((org-agenda-entry-types '(:deadline))
            (org-agenda-span 1)
            (org-deadline-warning-days 60)
            (org-agenda-overriding-header "Upcoming Deadlines")
            (org-agenda-time-grid nil)))

          ;; Special types
          ("z" . "Media")
          ("zr" "To read (excluding papers)" tags-todo "TODO=\"TOREAD\"-CATEGORY=\"papers\""
           (
            (org-agenda-filter-preset '(""))
            (org-agenda-sorting-strategy '(priority-down tag-down))
            ))
          ;; ("zR" "To read (excluding papers) - including 'someday'" tags-todo "TODO=\"TOREAD\"-CATEGORY=\"papers\""
          ;;  ((org-agenda-filter-preset '(""))
          ;;   (org-agenda-sorting-strategy '(priority-down tag-down))))
          ("zw" "To watch" todo "TOWATCH"
           (
            (org-agenda-filter-preset '(""))
            (org-agenda-view-columns-initially t)
            (org-agenda-sorting-strategy '(priority-down tag-down))))
          ("zl" "To listen" todo "TOLISTEN"
           ((org-agenda-filter-preset '(""))
            (org-agenda-sorting-strategy '(priority-down tag-down))))

          ;; ("w" "Work"
          ;;  ((agenda ""
          ;;           ((org-agenda-span 1)
          ;;            (org-agenda-files '("~/Dropbox/org/thesis.org"
          ;;                                "~/Dropbox/org/gcal/"))
          ;;            (org-agenda-skip-function '(org-agenda-skip-entry-if
          ;;                                        'todo '("WAITING")))
          ;;            (org-agenda-overriding-header "Thesis Agenda")))
          ;;   (tags-todo "WORK"
          ;;              ((org-agenda-todo-ignore-scheduled t)
          ;;               (org-agenda-overriding-header "TODOs")))
          ;;   )
          ;;  ((org-agenda-sorting-strategy '(time-up priority-down tag-down todo-state-up))
          ;;   (org-agenda-filter-preset '(""))
          ;;   (org-agenda-regexp-filter-preset '(""))
          ;;   (org-agenda-tag-filter-preset '("+WORK"))
          ;;   )
          ;;  ((org-agenda-files '("~/Dropbox/org/thesis.org"))
          ;;   (org-agenda-sorting-strategy '(priority-down tag-down todo-state-up))
          ;;   (org-agenda-filter-preset '("")))
          ;;  )
          ))
#+END_SRC

General agenda settings
#+BEGIN_SRC emacs-lisp
  ;; (setq org-agenda-filter-preset '("-someday"))
  (setq org-agenda-filter-preset '("-someday" "-WORK"))
  (setq org-agenda-regexp-filter-preset '("-WAITING"))
  (setq org-agenda-log-mode-items '(clock state))

  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)

  ;; Start agenda in day mode
  (setq org-agenda-span 1)

  ;; Start week on monday
  (setq org-agenda-start-on-weekday 1)

  ;; Tasks that cannot be done because of dependencies should not clutter the agenda
  ;; t grays them out, 'invisible makes them disappear
  (setq org-agenda-dim-blocked-tasks 'invisible)

  ;; Better overview in agenda with my recurring tasks
  (setq org-agenda-show-future-repeats 'next)

  ;; Include archived files
  (setq org-agenda-archives-mode t)
#+END_SRC
** org-projectile
Add project files to the org agenda
#+BEGIN_SRC emacs-lisp
  ;; (with-eval-after-load 'org-agenda
  ;;   (require 'org-projectile)
  ;;   (mapcar '(lambda (file)
  ;;              (when (file-exists-p file)
  ;;                (push file org-agenda-files)))
  ;;           (org-projectile-todo-files)))
#+END_SRC

Add project capture to capture menu
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-capture-templates
  ;;              (org-projectile-project-todo-entry
  ;;               :capture-character "p"))
#+END_SRC
** Clocking
#+BEGIN_SRC emacs-lisp
  (setq org-clock-out-when-done t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-report-include-clocking-task t)

  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3 :fileskip0 t :compact t))

  ;; This seems to lead to some unpleasant behavior
  ;; (add-hook 'kill-emacs-hook #'org-clock-out)

  (spacemacs/toggle-mode-line-org-clock-on)
#+END_SRC
** Exports
When I write org to not write LaTeX
#+BEGIN_SRC emacs-lisp
  ;; remove comments from org document for use with export hook
  ;; https://emacs.stackexchange.com/questions/22574/orgmode-export-how-to-prevent-a-new-line-for-comment-lines
  (defun delete-org-comments (backend)
    (loop for comment in (reverse (org-element-map (org-element-parse-buffer)
                                      'comment 'identity))
          do
          (setf (buffer-substring (org-element-property :begin comment)
                                  (org-element-property :end comment))
                "")))
  ;; add to export hook
  (add-hook 'org-export-before-processing-hook 'delete-org-comments)
#+END_SRC
** org-download
#+BEGIN_SRC emacs-lisp
  ;; Not optimal, but otherwise it creates wayy too many folders
  (setq-default org-download-image-dir "~/Dropbox/org/images")
  (setq org-download-screenshot-method "sleep 1; scrot -s %s")
  (setq org-download-image-latex-width 7)
#+END_SRC
** Misc
To be able to press "S" in the agenda ;)
#+BEGIN_SRC emacs-lisp
  ;; Set long and latiude for sunset
  (setq calendar-latitude 48.248872)
  (setq calendar-longitude 11.653248)
#+END_SRC
** todo state logging note inserts now open in evil insert mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-log-buffer-setup-hook 'evil-insert-state)
#+END_SRC
** org cycle
#+BEGIN_SRC emacs-lisp
  ;; (setq org-cycle-separator-lines 1)
#+END_SRC
* Org & Latex
** Latex exports
#+BEGIN_SRC emacs-lisp
  ;; (setq org-latex-pdf-process (list "latexmk -pdf %f"))
  (setq org-latex-pdf-process (list
                               "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))

  (add-to-list 'org-latex-classes
               '("letter" "\\documentclass{letter}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("article" "\\documentclass[a4paper]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("scrbook" "\\documentclass{scrbook}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("tumthesis" "\\documentclass{tumthesis}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (evil-leader/set-key-for-mode 'org-mode "e p"
    'org-latex-export-to-pdf)
  ;; (lambda () (interactive) (org-latex-export-to-pdf t)))
  (evil-leader/set-key-for-mode 'org-mode "e B"
    'org-beamer-export-to-pdf)
  (evil-leader/set-key-for-mode 'org-mode "e b"
    'org-beamer-export-to-latex)
  ;; (lambda () (interactive) (org-beamer-export-to-pdf t)))
  (evil-leader/set-key-for-mode 'org-mode "e t"
    'org-latex-export-to-latex)
#+END_SRC

Ability to ignore headings in the export, so that I can use them just to
structure and fold my text:
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines org-export-ignore-headlines))
#+end_src

Make TODOs red in the latex export
#+begin_src emacs-lisp
(defun org-latex-format-headline-colored-keywords-function
    (todo todo-type priority text tags info)
        (concat
           (cond ((string= todo "TODO")(and todo (format "{\\color{red}\\bfseries\\sffamily %s} " todo)))
   ((string= todo "DONE")(and todo (format "{\\color{green}\\bfseries\\sffamily %s} " todo))))
            (and priority (format "\\framebox{\\#%c} " priority))
            text
            (and tags
            (format "\\hfill{}\\textsc{%s}"
    (mapconcat (lambda (tag) (org-latex-plain-text tag info))
           tags ":")))))

(setq org-latex-format-headline-function 'org-latex-format-headline-colored-keywords-function)
#+end_src
** Latex/Org mode switch
#+BEGIN_SRC emacs-lisp
  ;; (defun switch-org-latex-mode ()
  ;;   (interactive)
  ;;   (if (equal major-mode 'org-mode) (latex-mode) (org-mode)))
  ;; (evil-leader/set-key-for-mode 'org-mode "l" 'switch-org-latex-mode)
  ;; (evil-leader/set-key-for-mode 'latex-mode "l" 'switch-org-latex-mode)
#+END_SRC
** cdlatex environments
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "i E" 'cdlatex-environment)
#+END_SRC
** Org latex syntax highlight
#+BEGIN_SRC emacs-lisp
  (setq org-highlight-latex-and-related '(latex))
#+END_SRC
** Org latex table caption below
#+begin_src emacs-lisp
  (setq org-latex-caption-above nil)
#+end_src
* org-brain
#+begin_src emacs-lisp
 (setq org-brain-path "/home/nath/Dropbox/brain")
#+end_src
* Magit
#+BEGIN_SRC emacs-lisp
  ;; Start magit commit in insert mode
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC
* LaTeX
Ask me about the TeX master file if unsure
#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC
** RefTex
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'latex-mode "r r" 'reftex-cleveref-cref)
#+END_SRC
** Outline Minor Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
#+END_SRC

Fake sections for better manipulation:
#+BEGIN_SRC emacs-lisp
  (setq TeX-outline-extra
        '(("%chapter" 1)
          ("%section" 2)
          ("%subsection" 3)
          ("%subsubsection" 4)
          ("%paragraph" 5)))
  ;; add font locking to the headers
  (font-lock-add-keywords
   'latex-mode
   '(("^%\\(chapter\\|\\(sub\\|subsub\\)?section\\|paragraph\\)"
      0 'font-lock-keyword-face t)
     ("^%chapter{\\(.*\\)}"       1 'font-latex-sectioning-1-face t)
     ("^%section{\\(.*\\)}"       1 'font-latex-sectioning-2-face t)
     ("^%subsection{\\(.*\\)}"    1 'font-latex-sectioning-3-face t)
     ("^%subsubsection{\\(.*\\)}" 1 'font-latex-sectioning-4-face t)
     ("^%paragraph{\\(.*\\)}"     1 'font-latex-sectioning-5-face t)))
#+END_SRC
** Outline-magic
#+BEGIN_SRC emacs-lisp
  (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)
  (define-key outline-minor-mode-map (kbd "M-h") 'outline-promote)
  (define-key outline-minor-mode-map (kbd "M-j") 'outline-move-subtree-down)
  (define-key outline-minor-mode-map (kbd "M-k") 'outline-move-subtree-up)
  (define-key outline-minor-mode-map (kbd "M-l") 'outline-demote)
  (define-key outline-minor-mode-map (kbd "M-H")
    (lambda() (interactive) (evil-visual-line) (outline-promote)))
  (define-key outline-minor-mode-map (kbd "M-L")
    (lambda() (interactive) (evil-visual-line) (outline-demote)))
#+END_SRC
** Visual fill mode instead of auto fill
#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook 'visual-fill-column-mode)
  (add-hook 'LaTeX-mode-hook 'spacemacs/toggle-auto-fill-mode-off)
  (add-hook 'LaTeX-mode-hook 'visual-fill-column-mode)
#+END_SRC
* Fira Code
#+BEGIN_SRC emacs-lisp
  ;; (defun setup-fira-code ()
  ;;   ;; Fira code stuff - copied from PierreSp
  ;;   ;; This works when using emacs --daemon + emacsclient
  ;;   (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  ;;   ;; This works when using emacs without server/client
  ;;   (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
  ;;   ;; I haven't found one statement that makes both of the above situations work, so I use both for now

  ;;   (defconst fira-code-font-lock-keywords-alist
  ;;     (mapcar (lambda (regex-char-pair)
  ;;               `(,(car regex-char-pair)
  ;;                 (0 (prog1 ()
  ;;                      (compose-region (match-beginning 1)
  ;;                                      (match-end 1)
  ;;                                      ;; The first argument to concat is a string containing a literal tab
  ;;                                      ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
  ;;             '(("\\(www\\)"                   #Xe100)
  ;;               ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
  ;;               ("\\(\\*\\*\\*\\)"             #Xe102)
  ;;               ("\\(\\*\\*/\\)"               #Xe103)
  ;;               ("\\(\\*>\\)"                  #Xe104)
  ;;               ("[^*]\\(\\*/\\)"              #Xe105)
  ;;               ("\\(\\\\\\\\\\)"              #Xe106)
  ;;               ("\\(\\\\\\\\\\\\\\)"          #Xe107)
  ;;               ("\\({-\\)"                    #Xe108)
  ;;               ;; ("\\(\\[\\]\\)"                #Xe109) This is the [] ligature and I don't like
  ;;               ("\\(::\\)"                    #Xe10a)
  ;;               ("\\(:::\\)"                   #Xe10b)
  ;;               ("[^=]\\(:=\\)"                #Xe10c)
  ;;               ("\\(!!\\)"                    #Xe10d)
  ;;               ("\\(!=\\)"                    #Xe10e)
  ;;               ("\\(!==\\)"                   #Xe10f)
  ;;               ("\\(-}\\)"                    #Xe110)
  ;;               ("\\(--\\)"                    #Xe111)
  ;;               ("\\(---\\)"                   #Xe112)
  ;;               ("\\(-->\\)"                   #Xe113)
  ;;               ("[^-]\\(->\\)"                #Xe114)
  ;;               ("\\(->>\\)"                   #Xe115)
  ;;               ("\\(-<\\)"                    #Xe116)
  ;;               ("\\(-<<\\)"                   #Xe117)
  ;;               ("\\(-~\\)"                    #Xe118)
  ;;               ("\\(#{\\)"                    #Xe119)
  ;;               ("\\(#\\[\\)"                  #Xe11a)
  ;;               ("\\(##\\)"                    #Xe11b)
  ;;               ("\\(###\\)"                   #Xe11c)
  ;;               ("\\(####\\)"                  #Xe11d)
  ;;               ("\\(#(\\)"                    #Xe11e)
  ;;               ("\\(#\\?\\)"                  #Xe11f)
  ;;               ("\\(#_\\)"                    #Xe120)
  ;;               ("\\(#_(\\)"                   #Xe121)
  ;;               ("\\(\\.-\\)"                  #Xe122)
  ;;               ("\\(\\.=\\)"                  #Xe123)
  ;;               ("\\(\\.\\.\\)"                #Xe124)
  ;;               ("\\(\\.\\.<\\)"               #Xe125)
  ;;               ("\\(\\.\\.\\.\\)"             #Xe126)
  ;;               ("\\(\\?=\\)"                  #Xe127)
  ;;               ("\\(\\?\\?\\)"                #Xe128)
  ;;               ("\\(;;\\)"                    #Xe129)
  ;;               ("\\(/\\*\\)"                  #Xe12a)
  ;;               ("\\(/\\*\\*\\)"               #Xe12b)
  ;;               ("\\(/=\\)"                    #Xe12c)
  ;;               ("\\(/==\\)"                   #Xe12d)
  ;;               ("\\(/>\\)"                    #Xe12e)
  ;;               ("\\(//\\)"                    #Xe12f)
  ;;               ("\\(///\\)"                   #Xe130)
  ;;               ("\\(&&\\)"                    #Xe131)
  ;;               ("\\(||\\)"                    #Xe132)
  ;;               ("\\(||=\\)"                   #Xe133)
  ;;                                         ;("[^|]\\(|=\\)"                #Xe134)
  ;;               ("\\(|>\\)"                    #Xe135)
  ;;               ("\\(\\^=\\)"                  #Xe136)
  ;;               ("\\(\\$>\\)"                  #Xe137)
  ;;               ("\\(\\+\\+\\)"                #Xe138)
  ;;               ("\\(\\+\\+\\+\\)"             #Xe139)
  ;;               ("\\(\\+>\\)"                  #Xe13a)
  ;;               ("\\(=:=\\)"                   #Xe13b)
  ;;                                         ;("[^!/]\\(==\\)[^>]"           #Xe13c)
  ;;               ("\\(===\\)"                   #Xe13d)
  ;;               ("\\(==>\\)"                   #Xe13e)
  ;;                                         ;("[^=]\\(=>\\)"                #Xe13f)
  ;;               ("\\(=>>\\)"                   #Xe140)
  ;;               ("\\(<=\\)"                    #Xe141)
  ;;               ("\\(=<<\\)"                   #Xe142)
  ;;               ("\\(=/=\\)"                   #Xe143)
  ;;               ("\\(>-\\)"                    #Xe144)
  ;;               ("\\(>=\\)"                    #Xe145)
  ;;               ("\\(>=>\\)"                   #Xe146)
  ;;               ("[^-=]\\(>>\\)"               #Xe147)
  ;;               ("\\(>>-\\)"                   #Xe148)
  ;;               ("\\(>>=\\)"                   #Xe149)
  ;;               ("\\(>>>\\)"                   #Xe14a)
  ;;               ("\\(<\\*\\)"                  #Xe14b)
  ;;               ("\\(<\\*>\\)"                 #Xe14c)
  ;;               ("\\(<|\\)"                    #Xe14d)
  ;;               ("\\(<|>\\)"                   #Xe14e)
  ;;               ("\\(<\\$\\)"                  #Xe14f)
  ;;               ("\\(<\\$>\\)"                 #Xe150)
  ;;               ("\\(<!--\\)"                  #Xe151)
  ;;               ("\\(<-\\)"                    #Xe152)
  ;;               ("\\(<--\\)"                   #Xe153)
  ;;               ("\\(<->\\)"                   #Xe154)
  ;;               ("\\(<\\+\\)"                  #Xe155)
  ;;               ("\\(<\\+>\\)"                 #Xe156)
  ;;               ("\\(<=\\)"                    #Xe157)
  ;;               ("\\(<==\\)"                   #Xe158)
  ;;               ("\\(<=>\\)"                   #Xe159)
  ;;               ("\\(<=<\\)"                   #Xe15a)
  ;;               ("\\(<>\\)"                    #Xe15b)
  ;;               ("[^-=]\\(<<\\)"               #Xe15c)
  ;;               ("\\(<<-\\)"                   #Xe15d)
  ;;               ("\\(<<=\\)"                   #Xe15e)
  ;;               ("\\(<<<\\)"                   #Xe15f)
  ;;               ("\\(<~\\)"                    #Xe160)
  ;;               ("\\(<~~\\)"                   #Xe161)
  ;;               ("\\(</\\)"                    #Xe162)
  ;;               ("\\(</>\\)"                   #Xe163)
  ;;               ("\\(~@\\)"                    #Xe164)
  ;;               ("\\(~-\\)"                    #Xe165)
  ;;               ("\\(~=\\)"                    #Xe166)
  ;;               ("\\(~>\\)"                    #Xe167)
  ;;               ("[^<]\\(~~\\)"                #Xe168)
  ;;               ("\\(~~>\\)"                   #Xe169)
  ;;               ("\\(%%\\)"                    #Xe16a)
  ;;               ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
  ;;               ("[^:=]\\(:\\)[^:=]"           #Xe16c)
  ;;               ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
  ;;               ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f)
  ;;               )))

  ;;   (defun add-fira-code-symbol-keywords ()
  ;;     (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

  ;;   (add-hook 'prog-mode-hook
  ;;             #'add-fira-code-symbol-keywords)
  ;;   )

#+END_SRC
* Python
** Black instead of yapf

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'python-mode "=" 'blacken-buffer)
#+END_SRC
** Sphinx Doc
Always enable sphinx-doc-mode
#+begin_src emacs-lisp
  ;; (add-hook 'python-mode-hook
  ;;           (lambda ()
  ;;             (require 'sphinx-doc)
  ;;             (sphinx-doc-mode t)))
  ;; (evil-leader/set-key-for-mode 'python-mode "d d" 'sphinx-doc)
#+end_src
* EXWM
** Tray
#+begin_src emacs-lisp
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)
#+end_src
** Workspaces
#+begin_src emacs-lisp
  (setq exwm-workspace-number 10)
#+end_src
** Time
#+begin_src emacs-lisp
  (display-time-mode t)
#+end_src

** Autostart
#+begin_src emacs-lisp
  ;; Autostart Dropbox
  ;; (call-process-shell-command "(sleep 10s && dropbox) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && megasync) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && nm-applet) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && redshift-gtk -l 48.2488721:11.6532477) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && spotify) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && ~/scripts/keyboard_setup.sh) &" nil 0)
#+end_src

** Global buffers
#+begin_src emacs-lisp
  (setq exwm-layout-show-all-buffers t)
#+end_src

* Wakatime
#+begin_src emacs-lisp
  ;; (global-wakatime-mode)
#+end_src

* Buffer Timer
#+begin_src emacs-lisp
  ;; (load-file "/home/nath/.spacemacs.d/packages/buffer-timer.el")
  ;; (require 'buffer-timer)
#+end_src

Config
#+begin_src emacs-lisp
  ;; (setq buffer-timer-regexp-master-list
  ;;   '(
  ;;     ("idle" .
  ;;      (("generic" .			  "^\\*idle\\*")
  ;;       ("generic2" .			  "^\\*idle-2\\*")
  ;;       ("minibuf" .                        "^ \\*Minibuf-.*")))
  ;;     ("personal" .
  ;;      (("reading" .                        "lib/ebooks/")
  ;;       ("photography" .                    "images/capturedonearth")))
  ;;     ("work" .
  ;;       (("rocket engine project" .
  ;;         (("docs" .                        "src/rocket.*org")
  ;;          ("code" .                        "src/rocket.*\\(cpp\\|h\\)$")
  ;;          ("generic" .                     "src/rocket")))
  ;;        ("world peace" .
  ;;         (("project planning" .            "src/worldpeas/TODO")
  ;;          ("implementation" .              "src/worldpeas")))))
  ;;      ))
#+end_src
