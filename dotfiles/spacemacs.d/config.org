#+TITLE:Literate Spacemacs Config with Org-babel
#+PROPERTY: header-args :results silent

* Table of Contents   :TOC:
- [[#general-emacs-settings][General Emacs settings]]
  - [[#hotkey-to-modify-this-config-file][Hotkey to modify this config file.]]
  - [[#i-like-visual-line-mode][I like visual line mode]]
  - [[#smoother-undo-behavior][Smoother undo behavior]]
  - [[#better-vertical-splitting][Better vertical splitting]]
  - [[#comment-regionline-with-c-s-c][Comment region/line with "C-S-c"]]
  - [[#larger-scroll-margin][Larger scroll margin]]
  - [[#fit-pdf-page-to-frame][Fit PDF page to frame]]
  - [[#pdf-dark-mode-to-fit-the-gruvbox-theme][PDF: Dark mode to fit the gruvbox theme]]
  - [[#auto-refresh-buffers-when-files-changed-on-disk][Auto-refresh buffers when files changed on disk]]
  - [[#libnotify-to-display-notifications][~libnotify~ to display notifications]]
  - [[#show-time-and-date-in-modeline][Show time and date in modeline]]
  - [[#pop-up-shell][Pop-up shell]]
  - [[#auth-info][Auth-info]]
  - [[#nicer-treemacs][Nicer ~treemacs~]]
  - [[#emacs-i3-window-movement-integration][Emacs-i3 window movement integration]]
  - [[#increase-numbers-with-the-same-hotkeys-as-in-vim][Increase numbers with the same hotkeys as in vim]]
  - [[#better-eshell-usage][Better eshell usage]]
  - [[#visible-bell-instead-of-ringing-bell][Visible bell instead of ringing bell]]
- [[#organize-my-life-with-org-mode][Organize my life with ~org-mode~]]
  - [[#general-settings][General settings]]
    - [[#prettier-org][Prettier org]]
      - [[#inline-images][Inline images]]
      - [[#pretty-entities][Pretty entities]]
      - [[#hide-emphasis-markers-for-increased-prettiness][Hide emphasis markers, for increased prettiness]]
      - [[#link-abbreviations][Link Abbreviations]]
    - [[#enforce-todo-dependencies][Enforce todo dependencies]]
    - [[#autosave-org-files][Autosave org files]]
    - [[#archive-tag-to-gray-out-things-i-do-not-need][Archive tag to gray out things I do not need]]
    - [[#start-org-with-some-useful-modes][Start org with some useful modes]]
    - [[#column-view][Column view]]
  - [[#org-refile-targets][~org-refile~ targets]]
  - [[#keywords][keywords]]
  - [[#org-agenda][~org-agenda~]]
    - [[#agenda-files][Agenda files]]
    - [[#agenda-views][Agenda views]]
    - [[#general-agenda-settings][General agenda settings]]
  - [[#org-capture-templates][~org-capture~ Templates]]
  - [[#project-management-any-task-with-subtasks-is-a-project][Project management: Any task with subtasks is a /project/!]]
  - [[#tracking-time-through-clocking][Tracking time through /clocking/]]
    - [[#general-clocking-settings][General clocking settings]]
    - [[#more-from-org-mode---organize-your-life-in-plain-text][More from Org Mode - Organize Your Life In Plain Text!]]
    - [[#define-hotkeys-for-clocking][Define hotkeys for clocking]]
  - [[#literate-programming-with-org-src-and-org-babel][Literate programming with ~org-src~ and ~org-babel~]]
  - [[#tracking-habits-with-org-habit][Tracking habits with ~org-habit~]]
  - [[#capture-directly-from-the-browser-with-org-protocol][Capture directly from the browser with ~org-protocol~]]
  - [[#my-paper-reading-workflow][My paper reading workflow]]
    - [[#general-variables][General Variables]]
    - [[#custom-hotkeys][Custom Hotkeys]]
    - [[#org-ref-notes][~org-ref~ notes]]
    - [[#use-cleveref-in-latex][Use ~cleveref~ in LaTeX]]
    - [[#org-noter-for-note-taking][~org-noter~ for note-taking]]
  - [[#manage-recipes-with-org-chef][Manage recipes with ~org-chef~]]
  - [[#better-screenshots-with-org-download][Better screenshots with ~org-download~]]
  - [[#org-projectile][org-projectile]]
  - [[#google-calendar-integration-with-org-gcal][Google-Calendar Integration with ~org-gcal~]]
  - [[#export-org-to-latex][Export org to LaTeX]]
    - [[#latex-exports][LaTeX exports]]
    - [[#cdlatex-environments][cdlatex environments]]
    - [[#syntax-highlight][Syntax highlight]]
    - [[#caption-below-tables-or-not][Caption below tables... or not!]]
    - [[#booktabs-for-tables][~booktabs~ for tables]]
    - [[#code-highlighting][Code highlighting]]
    - [[#no-hyperref-setup-by-default][No hyperref setup by default]]
  - [[#zettelkasten-with-org-roam][/Zettelkasten/ with ~org-roam~]]
    - [[#set-directory][Set Directory]]
    - [[#start-org-roam-mode-on-startup][Start ~org-roam-mode~ on startup]]
    - [[#add-hotkeys][Add hotkeys]]
    - [[#capture-template][Capture template]]
    - [[#capture-ref-from-browser][Capture Ref from Browser]]
    - [[#org-roam-bibtex][org-roam-bibtex]]
  - [[#org-fragtog-to-make-latex-easier][~org-fragtog~ to make latex easier]]
- [[#other-packages--languages--concepts][Other Packages / Languages / Concepts]]
  - [[#manage-my-email-with-mu4e][Manage my Email with ~mu4e~]]
    - [[#contexts][Contexts]]
    - [[#send-emails][Send Emails]]
      - [[#org][Org]]
    - [[#html-mails-with-images][HTML Mails with images]]
    - [[#notifications-for-new-email][Notifications for new Email]]
    - [[#pandoc-for-html][Pandoc for HTML]]
    - [[#visual-line-mode-hook][Visual line mode hook]]
    - [[#check-for-supposed-attachments-prior-to-sending-them][Check for supposed attachments prior to sending them]]
    - [[#gnus-view][gnus view]]
    - [[#link-to-message-not-headers][Link to message, not headers]]
  - [[#writeroom][Writeroom]]
  - [[#magit---the-best-git-interface][~magit~ - The best git interface]]
    - [[#add-uni-tuebingen-gitlab][Add uni-tuebingen gitlab]]
  - [[#latex][LaTeX]]
    - [[#reftex][RefTex]]
    - [[#outline-minor-mode][Outline Minor Mode]]
    - [[#outline-magic][Outline-magic]]
    - [[#visual-fill-mode-instead-of-auto-fill][Visual fill mode instead of auto fill]]
    - [[#beamer-bold-as-bold-not-as-alert][Beamer: Bold as bold, not as alert!]]
  - [[#exwm---the-emacs-x-window-manager][~exwm~ - The Emacs X Window Manager]]
  - [[#drop-down-emacs-with-yequake][Drop-down emacs with ~Yequake~]]
  - [[#ein-to-open-jupyter-notebooks-in-emacs][~ein~ to open jupyter notebooks in emacs]]
  - [[#yasnippet][YASnippet]]
  - [[#budget-money-with-ledger-cli][Budget money with ~ledger-cli~]]
  - [[#grammar-checking-with-languagetool][Grammar checking with LanguageTool]]
  - [[#julia][Julia]]
    - [[#julia-block][Julia block]]
    - [[#jupyte-julia-default-org-babel-settings][Jupyte julia default org babel settings]]
  - [[#python][Python]]
    - [[#configure-flycheck][Configure flycheck]]
    - [[#python-language-server-configuration][python language server configuration]]
    - [[#use-fill-column][Use fill column]]
  - [[#bugfix-tramp][Bugfix TRAMP]]

* General Emacs settings
Config also in [[file:init.el]]. All the layers are there, also all things that are
customized in the original config file.

** Hotkey to modify this config file.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "feC"
    (lambda() (interactive) (find-file "~/.spacemacs.d/config.org")))
#+END_SRC

** I like visual line mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'spacemacs/toggle-visual-line-navigation-on)
#+END_SRC

** Smoother undo behavior
#+BEGIN_SRC emacs-lisp
  (setq evil-want-fine-undo t)
#+END_SRC
** Better vertical splitting
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 160)
#+END_SRC
** Comment region/line with "C-S-c"
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-c") 'evilnc-comment-or-uncomment-lines)
#+END_SRC
** Larger scroll margin
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 1)
#+END_SRC

** Fit PDF page to frame
open pdfs scaled to fit page
#+BEGIN_SRC emacs-lisp
  (setq-default pdf-view-display-size 'fit-page)
#+END_SRC

** PDF: Dark mode to fit the gruvbox theme
midnight mode
#+begin_src emacs-lisp
  (setq pdf-view-midnight-colors '("#fdf4c1" . "#282828"))
#+end_src

Delete the border
#+begin_src emacs-lisp
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (set (make-local-variable
                    'evil-evilified-state-cursor)
                   (list nil))))
#+end_src

Always start in midnight mode
#+begin_src emacs-lisp
  ;; (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
#+end_src

** Auto-refresh buffers when files changed on disk
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** ~libnotify~ to display notifications
#+BEGIN_SRC emacs-lisp
  (setq alert-default-style 'libnotify)
#+END_SRC

** Show time and date in modeline
#+begin_src emacs-lisp
  (setq display-time-day-and-date t)
#+end_src

** Pop-up shell
#+begin_src emacs-lisp
  ;; (setq shell-pop-universal-key "<f12>")
  (setq shell-default-shell 'eshell)
  (setq shell-pop-autocd-to-working-dir nil)
  (global-set-key (kbd "<f12>") 'spacemacs/default-pop-shell)
  (global-set-key (kbd "<s-f12>") 'spacemacs/default-pop-shell)
#+end_src

** Auth-info
#+begin_src emacs-lisp
  (setq auth-sources
        '((:source "~/.authinfo.gpg")))
#+end_src

** Nicer ~treemacs~
#+begin_src emacs-lisp
  (setq doom-themes-treemacs-theme
        ;; "doom-colors"
        "doom-atom"
        )
  (doom-themes-treemacs-config)
#+end_src

** Emacs-i3 window movement integration                                :WIP:
The goal here: Have one hotkey to move windows in both i3wm and Emacs.
The general idea had the following control flow:
- Check if the currently focused window is emacs
  - If not, change window focus as usual => DONW
  - If yes, pass key presses on to Emacs
    - Check if there is an emacs window on the desired direction
      - If yes, change window focus inside emacs => DONE
      - If not, change window focus in i3wm by calling ~i3-msg~ => DONE

First define my custom windmove functions
#+begin_src emacs-lisp
  (defun i3-windmove-left ()
    (interactive)
    (condition-case nil
        (windmove-left)
      (error (shell-command "i3-msg focus left"))))

  (defun i3-windmove-right ()
    (interactive)
    (condition-case nil
        (windmove-right)
      (error (shell-command "i3-msg focus right"))))

  (defun i3-windmove-up ()
    (interactive)
    (condition-case nil
        (windmove-up)
      (error (shell-command "i3-msg focus up"))))

  (defun i3-windmove-down ()
    (interactive)
    (condition-case nil
        (windmove-down)
      (error (shell-command "i3-msg focus down"))))
#+end_src

#+RESULTS:
: i3-windmove-down

Set custom hotkeys
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s-h") 'i3-windmove-left)
  (global-set-key (kbd "C-s-j") 'i3-windmove-down)
  (global-set-key (kbd "C-s-k") 'i3-windmove-up)
  (global-set-key (kbd "C-s-l") 'i3-windmove-right)
#+end_src

#+RESULTS:
: i3-windmove-right

** Increase numbers with the same hotkeys as in vim
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
  (define-key evil-visual-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
  (define-key evil-visual-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+end_src

** Better eshell usage
Make `helm-eshell-history`, a.k.a. ", H", use the current frame instead of
opening a new one:
#+begin_src emacs-lisp
  (setq helm-show-completion-display-function #'helm-show-completion-default-display-function)
#+end_src

** Visible bell instead of ringing bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

* Organize my life with ~org-mode~
I love org so much, it deserves its own heading.
** General settings
*** Prettier org
**** Inline images
#+BEGIN_SRC emacs-lisp
  ;; Inline images
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width 500)
#+END_SRC

**** Pretty entities
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
**** Hide emphasis markers, for increased prettiness
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src
**** Link Abbreviations
#+begin_src emacs-lisp
  (setq org-link-abbrev-alist
        '(
          ("wolfram" . "https://wolframalpha.com/input/?i=%s")
          ("duckduckgo" . "https://duckduckgo.com/?q=%s")
          ("gmap" . "https://maps.google.com/maps?q=%s")
          ("gimages" . "https://google.com/images?q=%s")
          ("google" . "https://google.com/search?q=")
          ("youtube" . "https://youtube.com/watch?v=%s")
          ("youtu" . "https://youtube.com/results?search_query=%s")
          ("github" . "https://github.com/%s")
          ))
#+end_src
*** Enforce todo dependencies
#+BEGIN_SRC emacs-lisp
  ;; Parents can only be marked as DONE if children tasks are undone
  ;; with the "ORDERED" property TODO children is blocked until all earlier siblings are marked DONE
  (setq org-enforce-todo-dependencies t)
#+END_SRC

*** Autosave org files
#+BEGIN_SRC emacs-lisp
  ;; Automatically save org buffers when agenda is open
  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
  ;;             (auto-save-mode)))
  ;; Save even more stuff
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+END_SRC

*** Archive tag to gray out things I do not need
#+BEGIN_SRC emacs-lisp
  (setq org-archive-tag "inactive")
#+END_SRC

*** Start org with some useful modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

*** Column view
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-overriding-columns-format "%CATEGORY(Category) %3PRIORITY  %42ITEM(Details) %TAGS(Tags) %7TODO(To Do) %5Effort(Time){:} %7CLOCKSUM(Clocked){:}")
#+END_SRC
** ~org-refile~ targets
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(
                             ;; ("~/org/todo.org" :maxlevel . 2)
                             ;; ("~/org/references.org" :maxlevel . 1)
                             ;; ("~/org/thesis.org" :level . 2)
                             ;; (nil . (:level . 1))
                             ;; (org-agenda-files . (:maxlevel . 2))
                             ("~/org/inbox.org" :level . 0)
                             ("~/org/todo.org" :maxlevel . 2)
                             ("~/org/references.org" :level . 1)
                             ("~/org/phd.org" :maxlevel . 2)
                             ("~/MEGA/papers/notes.org" :level . 1)
                             ("~/org/projects/odefilters.org" :level . 1)
                             (nil . (:maxlevel . 2))
                             ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC
** Todo keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(N)" "STARTED(s!)" "WAITING(W@/!)" "|" "INACTIVE(i)" "CANCELLED(c@)" "DONE(d!)")
          (sequence "TOREAD(r)" "|" "1PASS(1)" "2PASS(2)" "3PASS(3)")
          (sequence "TOWATCH(w)" "|")
          (sequence "TOLISTEN(l)" "|")
          (sequence "REMINDER(R)" "|" "NOTE(n)" "REFERENCE(D!)")
          ))
  (setq org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#fb4934" :weight bold))
          ("NEXT" . (:foreground "#fe8019" :weight bold))
          ("TOREAD" . (:foreground "#d79921" :weight bold))
          ("TOWATCH" . (:foreground "#b16286" :weight bold))
          ("TOLISTEN" . (:foreground "#b16286" :weight bold))
          ("INACTIVE" . (:foreground "#a89984" :weight bold))
          ("WAITING" . (:foreground "#83a598" :weight bold))
          ("STARTED" . (:foreground "#fe8019" :weight bold))
          ("NOTE" . (:foreground "#458588" :weight bold))
          ("REFERENCE" . (:foreground "#458588" :weight bold))
          ("CANCELLED" . (:foreground "#928374" :weight bold))
          ("1PASS" . (:foreground "#98971a" :weight bold))
          ("2PASS" . (:foreground "#98971a" :weight bold))
          ("3PASS" . (:foreground "#98971a" :weight bold))
          ("REMINDER" . "#8ec07c")
          ))

  ;; Open the log-buffer in evil-insert-state
  (add-hook 'org-log-buffer-setup-hook 'evil-insert-state)
#+END_SRC

** ~org-agenda~
*** Agenda files
#+BEGIN_SRC emacs-lisp
  ;; Default folder for agenda files?
  (setq org-agenda-files '("~/org/"
                           "~/org/gcal/"
                           "~/org/projects/"
                           ;; "~/org/zettelkasten/"
                           ;; "~/org/zettelkasten/refs/"
                           "~/MEGA/papers/notes.org"
                           ))
  ;; To append to the list
  ;; (mapcar '(lambda (file)
  ;;            (push file org-agenda-files))
  ;;         '("~/org/"
  ;;           "~/org/gcal/"
  ;;           "~/MEGA/papers/notes.org"
  ;;           )
  ;;         )

    (with-eval-after-load 'org (setq org-default-notes-file '"~/org/todo.org"))
#+END_SRC

*** Agenda views
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("c" "Coding Projects" tags "coding-TODO=\"DONE\"" ())
          ("C" "Coding Projects Tree" tags-tree "coding-TODO=\"DONE\"" ())

          ("p" "Papers"
           ((tags-todo "PhD+CATEGORY=\"papers\""
                       ((org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-overriding-header "Papers (phd.org)")))
            (todo "TOREAD"
                  ((org-agenda-files '("~/MEGA/papers/notes.org"))
                   (org-agenda-sorting-strategy '(priority-down tag-down))
                   (org-agenda-overriding-header "Papers (notes.org)")))
            ))

          ("d" "Taskslist"
           ((tags-todo "-CATEGORY=\"papers\""
                       ((org-agenda-filter-preset '("-someday"))
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-tags-todo-honor-ignore-options t)))
            ))

          ;; GTD-like workflow; Currently unused, thus the hiding, but potentially very interesting!
          ("g" . "GTD")
          ("gc" "Upcoming week - Columns" agenda ""
           ((org-agenda-span 'week)
            (org-agenda-filter-preset '("-habit"))
            (org-agenda-view-columns-initially t)
            ))
          ("gn" "Next Actions"
           ((tags-todo "-CATEGORY=\"papers\""
                       ((org-agenda-filter-preset '("-someday"))
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-tags-todo-honor-ignore-options t)))
            ))
          ("gs" "Someday" tags-todo "someday"
           ((org-agenda-filter-preset '("+someday"))
            (org-use-tag-inheritance nil)
            (org-agenda-todo-ignore-with-date nil)))
          ("gd" "Upcoming deadlines" agenda ""
           ((org-agenda-entry-types '(:deadline))
            (org-agenda-span 1)
            (org-deadline-warning-days 60)
            (org-agenda-overriding-header "Upcoming Deadlines")
            (org-agenda-time-grid nil)))

          ;; Special types
          ("z" . "Media")
          ("zr" "To read (excluding papers)" tags-todo "TODO=\"TOREAD\"-CATEGORY=\"papers\""
           (
            (org-agenda-filter-preset '(""))
            (org-agenda-sorting-strategy '(priority-down tag-down))
            ))
          ;; ("zR" "To read (excluding papers) - including 'someday'" tags-todo "TODO=\"TOREAD\"-CATEGORY=\"papers\""
          ;;  ((org-agenda-filter-preset '(""))
          ;;   (org-agenda-sorting-strategy '(priority-down tag-down))))
          ("zw" "To watch" todo "TOWATCH"
           (
            (org-agenda-filter-preset '(""))
            (org-agenda-view-columns-initially t)
            (org-agenda-sorting-strategy '(priority-down tag-down))))
          ("zl" "To listen" todo "TOLISTEN"
           ((org-agenda-filter-preset '(""))
            (org-agenda-sorting-strategy '(priority-down tag-down))))

          ("a" "Standard View"
           ((agenda ""
                    ((org-agenda-span 1)
                     (org-agenda-overriding-header "Agenda")))
            (tags "CATEGORY=\"Inbox\""
                  ((org-agenda-overriding-header "To Refile")
                   ;; (org-agenda-files '("/home/nath/org/inbox.org"))
                   (org-agenda-regexp-filter-preset '("-Inbox"))
                   ))
            )
           ((org-agenda-tag-filter-preset '("-PhD")))
           )

          ("w" "Work"
           ((agenda ""
                    ((org-agenda-span 1)
                     ;; (org-agenda-files '("~/org/phd.org"
                     ;;                     ;; "~/org/phd.org_archive"
                     ;;                     "~/org/phd_journal.org"
                     ;;                     "~/MEGA/papers/notes.org"
                     ;;                     "~/org/gcal/moml.org"
                     ;;                     "~/org/gcal/uni.org"
                     ;;                     "~/org/gcal/phd.org"))
                     ;; (org-agenda-skip-function '(org-agenda-skip-entry-if
                     ;;                             'todo '("WAITING")))
                     (org-agenda-overriding-header "Thesis Agenda")))
            (tags-todo "CATEGORY=\"PhD-Inbox\""
                       ((org-agenda-overriding-header "To Refile")
                        ;; (org-agenda-files '("~/org/phd.org"))
                        ;; (org-agenda-regexp-filter-preset '("-PhD-Inbox"))
                        ))
            (tags-todo "-CANCELLED/!"
                       ((org-agenda-overriding-header "Stuck Projects")
                        (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                        (org-agenda-sorting-strategy
                         '(category-keep))
                        (org-tags-match-list-sublevels 'indented)
                        (org-agenda-dim-blocked-tasks nil)
                        ))
            (tags-todo "-HOLD-CANCELLED/!"
                       ((org-agenda-overriding-header "Projects")
                        (org-agenda-skip-function 'bh/skip-non-projects)
                        ;; (org-tags-match-list-sublevels 'indented)
                        (org-agenda-sorting-strategy
                         '(category-keep))
                        (org-agenda-dim-blocked-tasks nil)
                        ))
            (tags-todo "PhD-REFILE-CANCELLED-WAITING-CATEGORY=\"papers\"-CATEGORY=\"PhD-Inbox\""
                       ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                              (if bh/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'bh/skip-project-tasks)
                        (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "-CANCELLED+WAITING|HOLD/!"
                       ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                              (if bh/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'bh/skip-non-tasks)
                        (org-tags-match-list-sublevels nil)
                        (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
            (tags-todo "PhD-CATEGORY=\"papers\""
                       ((org-agenda-todo-ignore-scheduled 'all)
                        ;; (org-agenda-files '("~/org/phd.org"
                        ;;                     "~/org/phd.org_archive"
                        ;;                     ))
                        (org-agenda-overriding-header "TODOs")))
            ;; (tags-todo "PhD+CATEGORY=\"papers\""
            ;;            ((org-agenda-todo-ignore-scheduled 'future)
            ;;             ;; (org-agenda-files '("~/MEGA/papers/notes.org"
            ;;             ;;                     "~/org/zettelkasten/refs/"))
            ;;             (org-agenda-overriding-header "Papers")))
            )
           ((org-agenda-filter-preset '("+PhD")))
           )
          ;;  ((org-agenda-sorting-strategy '(time-up priority-down tag-down todo-state-up))
          ;;   (org-agenda-filter-preset '(""))
          ;;   (org-agenda-regexp-filter-preset '(""))
          ;;   (org-agenda-tag-filter-preset '("+WORK"))
          ;;   )
          ;;  ((org-agenda-files '("~/org/thesis.org"))
          ;;   (org-agenda-sorting-strategy '(priority-down tag-down todo-state-up))
          ;;   (org-agenda-filter-preset '("")))
          ;;  )

          ("gp" "Project Organization Stuff"
           (
            (tags-todo "-CANCELLED/!"
                       ((org-agenda-overriding-header "Stuck Projects")
                        (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-INACTIVE-HOLD-CANCELLED/!"
                       ((org-agenda-overriding-header "Projects")
                        (org-agenda-skip-function 'bh/skip-non-projects)
                        (org-tags-match-list-sublevels 'indented)
                        (org-agenda-sorting-strategy '(category-keep))))
            (tags-todo "-CANCELLED/!NEXT"
                       ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                              (if bh/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                        (org-tags-match-list-sublevels t)
                        (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-sorting-strategy
                         '(todo-state-down effort-up category-keep))))
            (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                       ((org-agenda-overriding-header (concat "Project Subtasks"
                                                              (if bh/hide-scheduled-and-waiting-next-tasks
                                                                  ""
                                                                " (including WAITING and SCHEDULED tasks)")))
                        (org-agenda-skip-function 'bh/skip-non-project-tasks)
                        (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            ))




          ))

#+END_SRC

*** General agenda settings
#+BEGIN_SRC emacs-lisp
  ;; (setq org-agenda-filter-preset '("-someday"))
  (setq org-agenda-tags-todo-honor-ignore-options t)
  (setq org-agenda-filter-preset '("-someday" "-WORK" "-inactive" "-ignore"))
  (setq org-agenda-regexp-filter-preset '("-WAITING"))
  (setq org-log-into-drawer t)
  (setq org-agenda-log-mode-items '(clock state))

  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)

  ;; Start agenda in day mode
  (setq org-agenda-span 1)

  ;; Start week on monday
  (setq org-agenda-start-on-weekday 1)

  ;; Tasks that cannot be done because of dependencies should not clutter the agenda
  ;; t grays them out, 'invisible makes them disappear
  (setq org-agenda-dim-blocked-tasks t)

  ;; Better overview in agenda with my recurring tasks
  (setq org-agenda-show-future-repeats 'next)

  ;; Include archived files
  (setq org-agenda-archives-mode t)

  ;; Re-center after jumping to an agenda item
  (add-hook 'org-agenda-after-show-hook #'recenter)
#+END_SRC
** ~org-capture~ Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file "~/org/inbox.org")
           "* TODO %?\n%U" :clock-in t :clock-resume t)
          ("T" "Todo Today" entry (file "~/org/inbox.org")
           "* TODO %?\nSCHEDULED: %t\n%U\n" :empty-lines 1 :clock-in t :clock-resume t)
          ("n" "Note" entry (file "~/org/inbox.org")
           "* NOTE %?\n%U" :empty-lines 1 :clock-in t :clock-resume t)
          ("N" "Note with Clipboard" entry (file "~/org/inbox.org")
           "* NOTE %?\n%U\n%c\n" :empty-lines 1)
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %?\n\nEntered on %U\n  %i" :clock-in t :clock-resume t)

          ("C" "Contacts" entry (file "~/org/contacts.org")
           "* %^{name}
  :PROPERTIES:
  :EMAIL: %^{email}
  :PHONE:
  :ALIAS:
  :NICKNAME:
  :IGNORE:
  :ICON:
  :NOTE:
  :ADDRESS:
  :BIRTHDAY:
  :END:")
          ("e" "Email" entry (file "~/org/inbox.org")
           "* TODO Email: %a (%:fromname) \n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n"
           :clock-in t :clock-resume t)
          ))
#+END_SRC

PhD-related captures:
#+begin_src emacs-lisp
  (setq org-capture-templates
        (append
         org-capture-templates
         '(("p" "PhD")
           ("pt" "Task" entry (file+headline "~/org/phd.org" "Inbox")
            "** TODO %?\n%U" :clock-in t :clock-resume t)
           ("pp" "probnum Task" entry (file+headline "~/org/phd.org" "probnum")
            "** TODO %?\n%U" :clock-in t :clock-resume t)
           ("pn" "Note" entry (file+headline "~/org/phd.org" "Inbox")
            "** NOTE %?\n%U" :clock-in t :clock-resume t)
           ("pj" "Journal" entry (file+olp+datetree "~/org/phd_journal.org")
            "* %?\n\nEntered on %U\n%i" :clock-in t :clock-resume t)
           ("pd" "Daily Sketch" entry (file+olp+datetree "~/org/phd_journal.org")
            "* Daily Sketch\n*Did:* %^{Did}\n*Struggle:* %^{Struggle}\n*Today:* %^{Today}"
            :immediate-finish t :clock-in t :clock-resume t)
           ("pe" "Email" entry (file+headline "~/org/phd.org" "Inbox")
            "* TODO Email: %a (%:fromname) \n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n"
            :clock-in t :clock-resume t)
           )
         ))
#+end_src

** Project management: Any task with subtasks is a /project/!
Copied from [[http://doc.norang.ca/org-mode.html#Projects][Org Mode - Organize Your Life In Plain Text!]]
#+begin_src emacs-lisp
  (setq org-stuck-projects (quote ("" nil nil "")))

  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p)
              nil)
             ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-non-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-task-p)
          nil)
         (t
          next-headline)))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((bh/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (bh/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline)))
#+end_src

** Tracking time through /clocking/
*** General clocking settings
#+BEGIN_SRC emacs-lisp
  (setq org-clock-out-when-done t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-report-include-clocking-task t)

  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4 :fileskip0 t :compact t))

  ;; This seems to lead to some unpleasant behavior
  ;; (add-hook 'kill-emacs-hook #'org-clock-out)

  (spacemacs/toggle-mode-line-org-clock-on)
#+END_SRC

*** More from [[http://doc.norang.ca/org-mode.html#ClockSetup][Org Mode - Organize Your Life In Plain Text!]]
#+begin_src emacs-lisp
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)

  ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 23)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
#+end_src

Now the fun part: Clock into parent if it has some TODO keyword; Into the
default task otherwise
#+begin_src emacs-lisp
  (setq bh/keep-clock-running nil)

  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the
  selected task.  If no task is selected set the Organization task
  as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defvar bh/organization-task-id "9e214582-66a4-4929-a067-1869c2ea16ef")

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defvar bh/break-task-id "c6e6d526-bd09-4a7a-9522-b90eae4d36ae")

  (defun bh/clock-in-break ()
    (interactive)
    (org-with-point-at (org-id-find bh/break-task-id 'marker)
      (org-clock-in)))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
#+end_src
*** Define hotkeys for clocking
#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "C s" 'bh/punch-in)
  (evil-leader/set-key "a o C s" 'bh/punch-in)
  (evil-leader/set-key-for-mode 'org-mode "C S" 'bh/punch-out)
  (evil-leader/set-key "a o C S" 'bh/punch-out)
  (evil-leader/set-key-for-mode 'org-mode "C b" 'bh/clock-in-break)
  (evil-leader/set-key "a o C b" 'bh/clock-in-break)
#+end_src
** Literate programming with ~org-src~ and ~org-babel~
Org-babel languages
#+BEGIN_SRC emacs-lisp
  (setq  inferior-julia-program-name (executable-find "julia"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (python . t)
     (gnuplot . t)
     (shell . t)
     (jupyter . t)
     (ein . t)
     (julia . t)
     (ledger . t)
     ))
#+END_SRC

Correct indentation in org-babel source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

Evaluate without confirmation
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC
** Tracking habits with ~org-habit~
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 50)
#+END_SRC

** Capture directly from the browser with ~org-protocol~
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-protocol)
#+end_src

Capture template
#+begin_src emacs-lisp
  (setq org-capture-templates
        (append
         org-capture-templates
         '(("y" "org-protocol-capture" entry (file "~/org/inbox.org")
            "* TODO [[%:link][%:description]]\n%U\n %i" :immediate-finish t)
           )
         ))
#+end_src

** My paper reading workflow
*This might not be up to date anymore, since I'm using org-roam now!*

Sources:
- https://codearsonist.com/reading-for-programmers
- https://github.com/jkitchin/org-ref

Goal is mostly to find the perfect paper workflow with emacs org-mode.
*** General Variables
Basically three parts:
- global bibliography file
- my notes
- pdf directory
These have to be defined in multiple locations as I use multiple different
libraries for this task
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/MEGA/papers/references.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/MEGA/papers/notes.org"
        org-ref-default-bibliography '("~/MEGA/papers/references.bib")
        org-ref-pdf-directory "~/MEGA/papers/lib/")

  (setq helm-bibtex-notes-path "~/MEGA/papers/notes.org"
        helm-bibtex-bibliography "~/MEGA/papers/references.bib"
        helm-bibtex-library-path "~/MEGA/papers/lib")

  ;; Further variables for helm-bibtex
  (setq bibtex-completion-bibliography "~/MEGA/papers/references.bib"
        bibtex-completion-library-path "~/MEGA/papers/lib"
        bibtex-completion-notes-path "~/MEGA/papers/notes.org")

  ;; Download directory
  (setq biblio-download-directory "~/MEGA/papers/lib")
#+END_SRC
*** Custom Hotkeys
To access interleave mode and helm-bibtex
#+BEGIN_SRC emacs-lisp
  (defun clock-in-and-interleave ()
    (interactive)
    (org-clock-in)
    (interleave-mode))

  ;; (evil-leader/set-key-for-mode 'org-mode "I" 'clock-in-and-interleave)
  ;; (evil-leader/set-key-for-mode 'org-mode "I" 'interleave-mode)
  ;; (evil-leader/set-key-for-mode 'org-mode "B" 'helm-bibtex)
  (evil-leader/set-key-for-mode 'bibtex-mode "B" 'helm-bibtex)
#+END_SRC
*** ~org-ref~ notes
Customized the structure of the default notes entry, to contain more information
(such as pdf), use TOREAD instead of TODO, and automatically enable interleave mode.
#+BEGIN_SRC emacs-lisp
  (setq org-ref-note-title-format "** TOREAD %t
  :PROPERTIES:
  :Custom_ID: %k
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
  :VOLUME: %v
  :PAGES: %p
  :DOI: %D
  :URL: %U
  :BIBTEX_LABEL: %k
  :PDF: %F
  :END:
  PDF: file:%F
  ")
#+END_SRC

*** Use ~cleveref~ in LaTeX
#+begin_src emacs-lisp
  (setq org-ref-default-ref-type "cref")
  (setq org-latex-prefer-user-labels t)
#+end_src
*** ~org-noter~ for note-taking
#+begin_src emacs-lisp
  (setq org-noter-property-doc-file "PDF")
  (setq org-noter-auto-save-last-location t)
#+end_src
** Manage recipes with ~org-chef~
#+BEGIN_SRC emacs-lisp
  (use-package org-chef :ensure t)
#+END_SRC

Capture template
#+begin_src emacs-lisp
  (setq org-capture-templates
        (append
         org-capture-templates
         '(("c" "Cookbook" entry (file "~/org/cookbook.org")
            "%(org-chef-get-recipe-from-url)"
            :empty-lines 1)
           )
         ))
#+end_src

** Better screenshots with ~org-download~
#+BEGIN_SRC emacs-lisp
  ;; Not optimal, but otherwise it creates wayy too many folders
  (setq-default org-download-image-dir "~/org/images")
  (setq org-download-screenshot-method "sleep 1; scrot -s %s")
  (setq org-download-image-latex-width 7)
#+END_SRC
** org-projectile                                                 :inactive:
Add project files to the org agenda
#+BEGIN_SRC emacs-lisp
  ;; (with-eval-after-load 'org-agenda
  ;;   (require 'org-projectile)
  ;;   (mapcar '(lambda (file)
  ;;              (when (file-exists-p file)
  ;;                (push file org-agenda-files)))
  ;;           (org-projectile-todo-files)))
#+END_SRC

Add project capture to capture menu
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-capture-templates
  ;;              (org-projectile-project-todo-entry
  ;;               :capture-character "p"))
#+END_SRC
** Google-Calendar Integration with ~org-gcal~
#+BEGIN_SRC emacs-lisp
  ;; Function to read lines of a file and output a list
  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))
  ;; ;; Read lines from gcal.auth and store them in the variable
  (setq auth-lines (read-lines "~/org/gcal.auth"))
  ;; ;; Google Calendar
  (setq org-gcal-client-id (car auth-lines)
        org-gcal-client-secret (car (cdr auth-lines)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Google Calendar
  (setq org-gcal-file-alist '(("nathanael.bosch@gmail.com" . "~/org/gcal/gcal.org")
                              ("43ntc9b5o132nim5q8pnin4hm8@group.calendar.google.com" . "~/org/gcal/uni.org")
                              ("67bvrtshu9ufjh2bk4c3vul8vc@group.calendar.google.com" . "~/org/gcal/urlaube.org")
                              ("5g7i1tndcav3oulm0c9ktb0v1bblscmr@import.calendar.google.com" . "~/org/gcal/tumonline.org")
                              ("9kv80prb7ojqt998nmm24149e0@group.calendar.google.com" . "~/org/gcal/geburtstage.org")
                              ("jt7jgitpk0sflvc0kvem9dvti8@group.calendar.google.com" . "~/org/gcal/phd.org")
                              ("2rvv79tm56hosm214aldkp881c@group.calendar.google.com" . "~/org/gcal/moml.org")
                              ))
  ;; (add-hook 'org-capture-after-finalize-hook 'org-gcal-fetch)
#+END_SRC
** Export org to LaTeX
For when I write org to not write LaTeX
*** LaTeX exports
#+BEGIN_SRC emacs-lisp
  ;; (setq org-latex-pdf-process (list "latexmk -pdf %f"))
  (setq org-latex-pdf-process (list
                               "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))

  (add-to-list 'org-latex-classes
               '("letter" "\\documentclass{letter}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("article" "\\documentclass[a4paper]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("scrbook" "\\documentclass{scrbook}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("tumthesis" "\\documentclass{tumthesis}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (evil-leader/set-key-for-mode 'org-mode "e p"
    'org-latex-export-to-pdf)
  ;; (lambda () (interactive) (org-latex-export-to-pdf t)))
  (evil-leader/set-key-for-mode 'org-mode "e B"
    'org-beamer-export-to-pdf)
  (evil-leader/set-key-for-mode 'org-mode "e b"
    'org-beamer-export-to-latex)
  ;; (lambda () (interactive) (org-beamer-export-to-pdf t)))
  (evil-leader/set-key-for-mode 'org-mode "e t"
    'org-latex-export-to-latex)
#+END_SRC

Ability to ignore headings in the export, so that I can use them just to
structure and fold my text:
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines org-export-ignore-headlines))
#+end_src

Make TODOs red in the latex export
#+begin_src emacs-lisp
(defun org-latex-format-headline-colored-keywords-function
    (todo todo-type priority text tags info)
        (concat
           (cond ((string= todo "TODO")(and todo (format "{\\color{red}\\bfseries\\sffamily %s} " todo)))
   ((string= todo "DONE")(and todo (format "{\\color{green}\\bfseries\\sffamily %s} " todo))))
            (and priority (format "\\framebox{\\#%c} " priority))
            text
            (and tags
            (format "\\hfill{}\\textsc{%s}"
    (mapconcat (lambda (tag) (org-latex-plain-text tag info))
           tags ":")))))

(setq org-latex-format-headline-function 'org-latex-format-headline-colored-keywords-function)
#+end_src

Ignore org comments on export
#+BEGIN_SRC emacs-lisp
  ;; remove comments from org document for use with export hook
  ;; https://emacs.stackexchange.com/questions/22574/orgmode-export-how-to-prevent-a-new-line-for-comment-lines
  (defun delete-org-comments (backend)
    (loop for comment in (reverse (org-element-map (org-element-parse-buffer)
                                      'comment 'identity))
          do
          (setf (buffer-substring (org-element-property :begin comment)
                                  (org-element-property :end comment))
                "")))
  ;; add to export hook
  (add-hook 'org-export-before-processing-hook 'delete-org-comments)
#+END_SRC
*** cdlatex environments
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "i E" 'cdlatex-environment)
#+END_SRC
*** Syntax highlight
#+BEGIN_SRC emacs-lisp
  (setq org-highlight-latex-and-related '(latex))
#+END_SRC
*** Caption below tables... or not!
#+begin_src emacs-lisp
  ;; (setq org-latex-caption-above nil)
  (setq org-latex-caption-above '(table))
#+end_src
*** ~booktabs~ for tables
#+begin_src emacs-lisp
  (setq org-latex-tables-booktabs t)
#+end_src
*** Code highlighting
#+begin_src emacs-lisp
;; (require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

;; (setq org-latex-pdf-process
;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src
*** No hyperref setup by default
#+begin_src emacs-lisp
  ;; (setq org-latex-with-hyperref nil)
#+end_src
** /Zettelkasten/ with ~org-roam~
#+begin_src emacs-lisp
  (setq org-roam-v2-ack t)
#+end_src
*** Set Directory
#+begin_src emacs-lisp
 (setq org-roam-directory "~/org/zettelkasten/")
#+end_src
*** Start ~org-roam-mode~ on startup
#+begin_src emacs-lisp
    ;; (add-hook 'after-init-hook 'org-roam-mode)
    (org-roam-setup)
#+end_src
*** Add hotkeys
#+begin_src emacs-lisp
  (spacemacs/declare-prefix "aoR" "org-roam")
  (spacemacs/set-leader-keys
  ;;   "aoRl" 'org-roam
  ;;   "aoRt" 'org-roam-today
    "aoRc" 'org-roam-capture
    "aoRf" 'org-roam-node-find
    ;; "aoRg" 'org-roam-show-graph
    )
  (spacemacs/declare-prefix-for-mode 'org-mode "mr" "org-roam")
  (spacemacs/set-leader-keys-for-major-mode 'org-mode
  ;;   "rl" 'org-roam
  ;;   "rt" 'org-roam-today
  ;;   "rb" 'org-roam-switch-to-buffer
    "rc" 'org-roam-capture
    "rf" 'org-roam-node-find
    "ri" 'org-roam-node-insert
    ;;   "rg" 'org-roam-show-graph
    )
#+end_src

*** Capture template
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n- tags :: \n")
           :unnarrowed t)
          )
        )
#+end_src
*** Capture Ref from Browser
#+begin_src emacs-lisp
  (require 'org-roam-protocol)

  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain
           "* TODO %? | [[${ref}][${title}]]\n"

           :if-new (file+head
                    "refs/%<%Y-%m-%d>-${slug}.org"
           "#+TITLE: ${title}
  ,#+ROAM_KEY: ${ref}
  - source :: ${ref}
  - tags ::

  ")
           :unnarrowed t
           )))
#+end_src
*** org-roam-bibtex
#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'org-roam-bibtex-mode)
  (add-hook 'bibtex-mode-hook #'org-roam-bibtex-mode)
#+end_src

#+begin_src emacs-lisp
  ;; (setq orb-templates
  (setq org-roam-capture-templates
        (append
         org-roam-capture-templates
        '(
          ("r" "bibliography reference" plain "%?"
           :if-new
           (file+head "refs/%<%Y-%m-%d>-${slug}.org"
                      "#+title: ${title}\n- source :: ${ref}\n- tags ::")
           :unnarrowed t)    ;;         ("r" "ref" plain #'org-roam-capture--get-point
          ;;          ""
          ;;          :file-name "refs/%<%Y-%m-%d>-${citekey}"
          ;;          :head "#+TITLE: ${title}
          ;; ,#+ROAM_KEY: ${ref}
          ;; - source :: ${ref}
          ;; - tags ::
          ;; "
          ;;          :unnarrowed t)
          ;;         ("p" "Paper" plain #'org-roam-capture--get-point
          ;;          ""
          ;;          :file-name "refs/%<%Y-%m-%d>-${citekey}"
          ;;          :head "#+TITLE: ${title}
          ;; ,#+ROAM_KEY: ${ref}
          ;; ,#+CATEGORY: papers
          ;; ,#+FILETAGS: :papers:
          ;; - tags ::
          ;; - PDF :: file:~/MEGA/papers/lib/${citekey}.pdf

          ;; ,* Notes
          ;; :PROPERTIES:
          ;; :PDF: ~/MEGA/papers/lib/${citekey}.pdf
          ;; :END:
          ;; PDF: file:~/MEGA/papers/lib/${citekey}.pdf
          ;; "
          ;;          :unnarrowed t)
          ;;         ;; Same as above but with a "PhD" tag
          ;;         ("P" "PhD Paper" plain #'org-roam-capture--get-point
          ;;          ""
          ;;          :file-name "refs/%<%Y-%m-%d>-${citekey}"
          ;;          :head "#+TITLE: ${title}
          ;; ,#+ROAM_KEY: ${ref}
          ;; ,#+CATEGORY: papers
          ;; ,#+FILETAGS: :papers:PhD:
          ;; - tags ::
          ;; - PDF :: file:~/MEGA/papers/lib/${citekey}.pdf

          ;; ,* Notes
          ;; :PROPERTIES:
          ;; :PDF: ~/MEGA/papers/lib/${citekey}.pdf
          ;; :END:
          ;; PDF: file:~/MEGA/papers/lib/${citekey}.pdf
          ;; "
          ;;          :unnarrowed t)
          )
        )
        )
#+end_src
** ~org-fragtog~ to make latex easier
#+begin_src emacs-lisp
  ;; (add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src
* Other Packages / Languages / Concepts
** Manage my Email with ~mu4e~
*** Contexts
#+BEGIN_SRC emacs-lisp
  (setq mu4e-contexts
   `(
     ,(make-mu4e-context
       :name "gmail"
       :match-func (lambda (msg) (when msg
         (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
       :vars '(
               (user-mail-address . "nathanael.bosch@gmail.com")
               (user-full-name . "Nathanael Bosch")
               (mu4e-trash-folder . "/Gmail/[Google Mail].Bin")
               (mu4e-refile-folder . "/Gmail/[Google Mail].Archive")
               (mu4e-sent-folder . "/Gmail/[Google Mail].Sent Mail")
               (mu4e-drafts-folder . "/Gmail/[Google Mail].Drafts")
               ))
     ,(make-mu4e-context
       :name "protonmail"
       :match-func (lambda (msg) (when msg
         (string-prefix-p "/Protonmail" (mu4e-message-field msg :maildir))))
       :vars '(
               (user-mail-address . "nathanael.bosch@pm.me")
               (user-full-name . "Nathanael Bosch")
               (mu4e-trash-folder . "/Protonmail/Trash")
               ;; (mu4e-refile-folder . "/UniTue/")
               (mu4e-sent-folder . "/Protonmail/Sent")
               (mu4e-drafts-folder . "/Protonmail/Drafts")
               ))
     ,(make-mu4e-context
       :name "uni-tue"
       :match-func (lambda (msg) (when msg
         (string-prefix-p "/UniTue" (mu4e-message-field msg :maildir))))
       :vars '(
               (user-mail-address . "nathanael.bosch@uni-tuebingen.de")
               (user-full-name . "Nathanael Bosch")
               (mu4e-trash-folder . "/UniTue/Mail.trash")
               ;; (mu4e-refile-folder . "/UniTue/")
               (mu4e-sent-folder . "/UniTue/Mail.sent")
               (mu4e-drafts-folder . "/UniTue/Mail.drafts")
               ))
     ,(make-mu4e-context
       :name "mpi-is"
       :match-func (lambda (msg) (when msg
         (string-prefix-p "/MPI-IS" (mu4e-message-field msg :maildir))))
       :vars '(
               (user-mail-address . "nathanael.bosch@tuebingen.mpg.de")
               (user-full-name . "Nathanael Bosch")
               (mu4e-trash-folder . "/MPI-IS/Trash")
               ;; (mu4e-refile-folder . "/MPI-IS/")
               (mu4e-sent-folder . "/MPI-IS/Sent")
               (mu4e-drafts-folder . "/MPI-IS/Drafts")
               ))
     ))
#+END_SRC

*** Send Emails
#+BEGIN_SRC emacs-lisp
  (setq mail-user-agent 'mu4e-user-agent  ; set mua header in mails
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-sendmail-f-is-evil t
        message-sendmail-function 'message-sendmail-with-sendmail
        send-mail-function 'message-send-mail-with-sendmail
        ;; sendmail-program "/home/jonas/bin/msmtpqueue/msmtp-enqueue.sh"
        sendmail-program "sendmail"
        message-kill-buffer-on-exit t     ; kill old messages when sent
        message-send-mail-function 'message-send-mail-with-sendmail
        message-forward-before-signature nil
        message-cite-reply-position 'above
  )

  ;; (defun msmtpsq-fail-sentinel (process event)
  ;;   "Informs the user if the process has failed"
  ;;   (cond ((eq (process-status process) 'exit)
  ;;          (message "msmtpq-runqueue has succeeded")
  ;;          (let ((proc-buf (process-buffer process)))
  ;;            (when (buffer-name proc-buf)
  ;;              (with-current-buffer proc-buf
  ;;                (set-buffer-modified-p nil)
  ;;                (kill-buffer proc-buf)))))
  ;;         ((memq (process-status process) '(failed signal))
  ;;          (lwarn '(msmtp) :error "msmtpq-runqueue has failed! For info see %s" (process-buffer process)))))

  ;; (defun msmtpq-runqueue ()
  ;;   "Runs the msmtp queue.

  ;; Uses the msmtpq-runqueue.sh script provided by the msmtp
  ;; package. In these scripts the queue directory can be set, see
  ;; there for more information."
  ;;   (interactive)
  ;;   (let* ((buf-name "*msmtp-runqueue output*")
  ;;          (buffer  (get-buffer-create buf-name)))
  ;;     (with-current-buffer buffer
  ;;       (erase-buffer)
  ;;       (message "running msmtpqueue ...")
  ;;       (let ((proc
  ;;              (start-process
  ;;               "msmtpq-run" buffer
  ;;               "/home/jonas/bin/msmtpqueue/msmtp-runqueue.sh")))
  ;;         (set-process-sentinel proc 'msmtpsq-fail-sentinel)))))

  ;; ;; (define-key 'mu4e-main-mode-map    (kbd "C-c C-r") 'msmtpq-runqueue)
  ;; ;; (define-key 'mu4e-headers-mode-map (kbd "C-c C-r") 'msmtpq-runqueue)
  ;; ;; (define-key 'mu4e-view-mode-map    (kbd "C-c C-r") 'msmtpq-runqueue)

  ;; ;; Don't keep message buffer around
  ;; (setq message-kill-buffer-on-exit t)
#+END_SRC

**** Org
#+begin_src emacs-lisp
  (setq org-mu4e-convert-to-html t)
#+end_src

*** HTML Mails with images

#+begin_src emacs-lisp
  ;; (setq
  ;;  mu4e-html2text-command "w3m -T text/html"
  ;;  mu4e-view-prefer-html t
  ;;  )
#+end_src

#+begin_src emacs-lisp
  ;; enable inline images
  ;; (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  ;; (when (fboundp 'imagemagick-register-types)
  ;;   (imagemagick-register-types))
#+end_src

Otherwise, open in a browser
#+begin_src emacs-lisp
  ;; (add-to-list 'mu4e-view-actions
  ;;              '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

*** Notifications for new Email
#+begin_src emacs-lisp
  (mu4e-alert-set-default-style 'libnotify)
#+end_src

*** Pandoc for HTML
Seems not bad actually
#+begin_src emacs-lisp
  ;; (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
#+end_src

*** Visual line mode hook
#+begin_src emacs-lisp
  ;; (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
#+end_src

*** Check for supposed attachments prior to sending them
#+begin_src emacs-lisp
  ;; (defvar my-message-attachment-regexp "\\(
  ;;                                       [Ww]e send\\|
  ;;                                       [Ii] send\\|
  ;;                                       attach\\|
  ;;                                       [aA]ngehängt\\|
  ;;                                       [aA]nhang\\|
  ;;                                       [sS]chicke\\|
  ;;                                       angehaengt\\|
  ;;                                       haenge\\|
  ;;                                       hänge\\)")
  ;; (defun my-message-check-attachment nil
  ;;   "Check if there is an attachment in the message if I claim it."
  ;;   (save-excursion
  ;;     (message-goto-body)
  ;;     (when (search-forward-regexp my-message-attachment-regexp nil t nil)
  ;;       (message-goto-body)
  ;;       (unless (or (search-forward "<#part" nil t nil)
  ;;                   (message-y-or-n-p
  ;;                    "No attachment. Send the message ?" nil nil))
  ;;         (error "No message sent")))))
  ;; (add-hook 'message-send-hook 'my-message-check-attachment)
#+end_src

*** gnus view
#+begin_src emacs-lisp
  ;; (setq mu4e-view-use-gnus t)
#+end_src
*** Link to message, not headers
#+begin_src emacs-lisp
  ;; (setq org-mu4e-link-query-in-headers-mode nil)
#+end_src
** Writeroom                                                           :WIP:
My goal here: Create a /beautiful/ writing environment!
#+begin_src emacs-lisp
  ;; (setq
  ;;  ;; writeroom-maximize-window t
  ;;  writeroom-fullscreen-effect nil
  ;;  writeroom-extra-line-spacing 0.3
  ;;  writeroom-width 88
  ;;  writeroom-border-width 30
  ;;  )
#+end_src

No line numbers
#+begin_src emacs-lisp
  ;; (defun my/writeroom-without-linenumbers (arg)
  ;;   (cond
  ;;    ((= arg 1)
  ;;     (spacemacs/toggle-line-numbers-off))
  ;;    ((= arg -1)
  ;;     (spacemacs/toggle-line-numbers-on))))

  ;; (add-to-list 'writeroom-global-effects 'my/writeroom-without-linenumbers)
#+end_src

Enable some nice white Theme
#+begin_src emacs-lisp
  ;; (setq my/main-theme 'gruvbox)
  ;; (setq my/writeroom-theme 'leuven)
  ;; (load-theme my/writeroom-theme)
  ;; (disable-theme my/writeroom-theme)
  ;; (load-theme my/main-theme)
  ;; (defun my/writeroom-theme-fn (arg)
  ;;   (cond
  ;;    ((= arg 1)
  ;;     (enable-theme my/writeroom-theme)
  ;;     (disable-theme my/main-theme)
  ;;     )
  ;;    ((= arg -1)
  ;;     (disable-theme my/writeroom-theme)
  ;;     (enable-theme my/main-theme)
  ;;     )
  ;;    ))
  ;; (add-to-list 'writeroom-global-effects 'my/writeroom-theme-fn)
#+end_src

** ~magit~ - The best git interface
Start in Evil mode
#+BEGIN_SRC emacs-lisp
  ;; Start magit commit in insert mode
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC

Magit blame keys
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c b") 'magit-blame)
#+end_src

Refine diffs
#+begin_src emacs-lisp
  (setq magit-diff-refine-hunk "all")
#+end_src

*** Add uni-tuebingen gitlab
#+begin_src emacs-lisp
  (add-to-list 'forge-alist
               '("gitlab.mlcloud.uni-tuebingen.de" "gitlab.mlcloud.uni-tuebingen.de/api/v4" "gitlab.mlcloud.uni-tuebingen.de" forge-gitlab-repository)
               )
#+end_src

** LaTeX
Ask me about the TeX master file if unsure
#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC
*** RefTex
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'latex-mode "r r" 'reftex-cleveref-cref)
#+END_SRC
*** Outline Minor Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
#+END_SRC

Fake sections for better manipulation:
#+BEGIN_SRC emacs-lisp
  (setq TeX-outline-extra
        '(("%chapter" 1)
          ("%section" 2)
          ("%subsection" 3)
          ("%subsubsection" 4)
          ("%paragraph" 5)))
  ;; add font locking to the headers
  (font-lock-add-keywords
   'latex-mode
   '(("^%\\(chapter\\|\\(sub\\|subsub\\)?section\\|paragraph\\)"
      0 'font-lock-keyword-face t)
     ("^%chapter{\\(.*\\)}"       1 'font-latex-sectioning-1-face t)
     ("^%section{\\(.*\\)}"       1 'font-latex-sectioning-2-face t)
     ("^%subsection{\\(.*\\)}"    1 'font-latex-sectioning-3-face t)
     ("^%subsubsection{\\(.*\\)}" 1 'font-latex-sectioning-4-face t)
     ("^%paragraph{\\(.*\\)}"     1 'font-latex-sectioning-5-face t)))
#+END_SRC
*** Outline-magic
#+BEGIN_SRC emacs-lisp
  (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)
  (define-key outline-minor-mode-map (kbd "M-h") 'outline-promote)
  (define-key outline-minor-mode-map (kbd "M-j") 'outline-move-subtree-down)
  (define-key outline-minor-mode-map (kbd "M-k") 'outline-move-subtree-up)
  (define-key outline-minor-mode-map (kbd "M-l") 'outline-demote)
  (define-key outline-minor-mode-map (kbd "M-H")
    (lambda() (interactive) (evil-visual-line) (outline-promote)))
  (define-key outline-minor-mode-map (kbd "M-L")
    (lambda() (interactive) (evil-visual-line) (outline-demote)))
#+END_SRC
*** Visual fill mode instead of auto fill
#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook 'visual-fill-column-mode)
  (add-hook 'LaTeX-mode-hook 'spacemacs/toggle-auto-fill-mode-off)
  (add-hook 'LaTeX-mode-hook 'visual-fill-column-mode)
#+END_SRC
*** Beamer: Bold as bold, not as alert!
#+begin_src emacs-lisp
  (defun my-beamer-bold (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

  (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold)
#+end_src

** ~exwm~ - The Emacs X Window Manager
General settings:
#+begin_src emacs-lisp
  ;; ;; Tray
  ;; (require 'exwm-systemtray)
  ;; (exwm-systemtray-enable)

  ;; ;; Workspaces
  ;; (setq exwm-workspace-number 10)

  ;; ;; Display time
  ;; (display-time-mode t)

  ;; ;; Global buffers
  ;; (setq exwm-layout-show-all-buffers t)
#+end_src

Autostart programs
#+begin_src emacs-lisp
  ;; Autostart Dropbox
  ;; (call-process-shell-command "(sleep 10s && dropbox) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && megasync) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && nm-applet) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && redshift-gtk -l 48.2488721:11.6532477) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && spotify) &" nil 0)
  ;; (call-process-shell-command "(sleep 10s && ~/scripts/keyboard_setup.sh) &" nil 0)
#+end_src

** Drop-down emacs with ~Yequake~
#+begin_src emacs-lisp
  (setq yequake-frames
        '(("TODOs & scratch" .
           ((width . 0.75)
            (height . 0.5)
            (alpha . 0.95)
            (buffer-fns . ("~/org/todo.org"
                           split-window-horizontally
                           "*scratch*"))
            (frame-parameters . ((undecorated . t)))))
          ("eguake" .
           ((width . 853)
            (height . 480)
            (top . 0.5)
            ;; (alpha . 0.95)
            (buffer-fns . (eshell))
            (frame-parameters . ((undecorated . t)))))
          ))
#+end_src

** ~ein~ to open jupyter notebooks in emacs
Aesthetic settings:
#+begin_src emacs-lisp
  ;; Inline images
  (setq ein:output-area-inlined-images t)

  ;; Nicer Markdown
  ;; (setq poly-ein-mode t)
  (setq ein:markdown-header-scaling t)
#+end_src
** YASnippet
Add the yasnippet-snippets snippets to YASnippet.
#+begin_src emacs-lisp
  (add-to-list 'yas-snippet-dirs yasnippet-snippets-dir)
#+end_src

Use YASnippet in ~ledger-mode~
#+begin_src emacs-lisp
  (add-hook 'ledger-mode-hook 'yas-minor-mode)
#+end_src
** Budget money with ~ledger-cli~
#+begin_src emacs-lisp
  (setq org-capture-templates
        (append
         org-capture-templates
         '(("l" "Ledger entries")
           ("lr" "Rewe" plain (file "~/MEGA/finances.ledger")
            "%(org-read-date) Rewe Einkauf
      Expenses:Food:Groceries     %^{Amount}
      Assets:Volksbank
    ")
           ;; ("lc" "Cash" plain (file "~/MEGA/finances.ledger")
           ;;  "%(org-read-date) * %^{Payee}
           ;;   Expenses:%^{Account}  %^{Amount}
           ;;   Expenses:Cash
           ;; ")
           )
         ))
#+end_src
** Grammar checking with LanguageTool
#+begin_src emacs-lisp
  (setq langtool-default-language "en-US")
  (setq langtool-bin "/usr/bin/languagetool")
#+end_src
** Julia
#+begin_src emacs-lisp
  (add-hook 'julia-mode-hook
            (lambda ()
              (set-fill-column 92)
              ;; (auto-fill-mode t)
              (spacemacs/toggle-fill-column-indicator-on)
              ))
#+end_src
*** Julia block
#+begin_src emacs-lisp
  ;; Type <j then tab key to create julia src block
  (add-to-list 'org-structure-template-alist '("j" . "src julia"))
#+end_src

#+begin_src emacs-lisp
  ;; Type <jj then tab key to create jupyter-julia src block
  (add-to-list 'org-structure-template-alist '("jj" . "src jupyter-julia"))
#+end_src
*** Jupyte julia default org babel settings
#+begin_src emacs-lisp
  (setq org-babel-default-header-args:jupyter-julia '((:async . "yes")
                                                      (:session . "jl")
                                                      (:kernel . "julia-1.5")
                                                      (:exports . "both")
                                                      (:results . "scalar")))
#+end_src
** Python
*** Configure flycheck
#+begin_src emacs-lisp
  (setq flycheck-python-flake8-executable "flake8")
  (setq flycheck-flake8rc ".flake8")

  ;; (setq flycheck-python-pylint-executable "pylint")
  ;; (setq flycheck-python-mypy-executable "mypy")
#+end_src
*** python language server configuration
#+begin_src emacs-lisp
  ;; (setq lsp-pyls-configuration-sources ["flake8"])
#+end_src
*** Use fill column
#+begin_src emacs-lisp
  ;; (add-hook 'python-mode-hook 'spacemacs/toggle-fill-column-indicator-on)
#+end_src
** Bugfix TRAMP
Faster than the default scp:
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

#+begin_src emacs-lisp
  ;; fixes to git-gutter+ when using tramp
  (with-eval-after-load 'git-gutter+
    ;; https://github.com/syl20bnr/spacemacs/issues/12860#issuecomment-602084919
    (defun git-gutter+-remote-default-directory (dir file)
      (let* ((vec (tramp-dissect-file-name file))
             (method (tramp-file-name-method vec))
             (user (tramp-file-name-user vec))
             (domain (tramp-file-name-domain vec))
             (host (tramp-file-name-host vec))
             (port (tramp-file-name-port vec)))
        (tramp-make-tramp-file-name method user domain host port dir)))

    (defun git-gutter+-remote-file-path (dir file)
      (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
        (replace-regexp-in-string (concat "\\`" dir) "" file)))
    )
#+end_src
